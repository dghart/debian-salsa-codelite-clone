//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: project_settings.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "project_settings_base_dlg.h"


// Declare the bitmap loading function
extern void wxCA3F0InitBitmapResources();

static bool bBitmapLoaded = false;


ProjectSettingsBaseDlg::ProjectSettingsBaseDlg(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCA3F0InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* mainSizer = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(mainSizer);
    
    m_panelSettings = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    
    mainSizer->Add(m_panelSettings, 1, wxEXPAND, 5);
    
    wxBoxSizer* m_sizerSettings = new wxBoxSizer(wxVERTICAL);
    m_panelSettings->SetSizer(m_sizerSettings);
    
    wxBoxSizer* bSizer44 = new wxBoxSizer(wxHORIZONTAL);
    
    m_sizerSettings->Add(bSizer44, 0, wxEXPAND, 5);
    
    wxArrayString m_choiceConfigArr;
    m_choiceConfig = new wxChoice(m_panelSettings, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), m_choiceConfigArr, 0);
    
    bSizer44->Add(m_choiceConfig, 1, wxALL|wxEXPAND, 5);
    
    m_treebook = new wxTreebook( m_panelSettings, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0 );
    m_sizerSettings->Add(m_treebook, 1, wxALL|wxEXPAND, 5);
    
    m_stdBtnSizer126 = new wxStdDialogButtonSizer();
    
    mainSizer->Add(m_stdBtnSizer126, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    m_button_ok = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_button_ok->SetDefault();
    m_stdBtnSizer126->AddButton(m_button_ok);
    
    m_button_apply = new wxButton(this, wxID_APPLY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_stdBtnSizer126->AddButton(m_button_apply);
    
    m_button_cancel = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_stdBtnSizer126->AddButton(m_button_cancel);
    
    m_button_help = new wxButton(this, wxID_HELP, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_stdBtnSizer126->AddButton(m_button_help);
    m_stdBtnSizer126->Realize();
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    m_choiceConfig->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(ProjectSettingsBaseDlg::OnConfigurationChanged), NULL, this);
    m_button_ok->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ProjectSettingsBaseDlg::OnButtonOK), NULL, this);
    m_button_apply->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ProjectSettingsBaseDlg::OnButtonApply), NULL, this);
    m_button_cancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ProjectSettingsBaseDlg::OnButtonCancel), NULL, this);
    m_button_help->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ProjectSettingsBaseDlg::OnButtonHelp), NULL, this);
    
}

ProjectSettingsBaseDlg::~ProjectSettingsBaseDlg()
{
    m_choiceConfig->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(ProjectSettingsBaseDlg::OnConfigurationChanged), NULL, this);
    m_button_ok->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ProjectSettingsBaseDlg::OnButtonOK), NULL, this);
    m_button_apply->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ProjectSettingsBaseDlg::OnButtonApply), NULL, this);
    m_button_cancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ProjectSettingsBaseDlg::OnButtonCancel), NULL, this);
    m_button_help->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ProjectSettingsBaseDlg::OnButtonHelp), NULL, this);
    
}

PSGeneralPageBase::PSGeneralPageBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCA3F0InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer35 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer35);
    
    m_generalPage = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    
    bSizer35->Add(m_generalPage, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* bSizer19 = new wxBoxSizer(wxVERTICAL);
    m_generalPage->SetSizer(bSizer19);
    
    wxFlexGridSizer* flexGridSizer2 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer2->SetFlexibleDirection( wxBOTH );
    flexGridSizer2->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2->AddGrowableCol(1);
    
    bSizer19->Add(flexGridSizer2, 0, wxEXPAND, 5);
    
    flexGridSizer2->Add(0, 0, 1, wxALL, 5);
    
    m_checkBoxDisableProject = new wxCheckBox(m_generalPage, wxID_ANY, _("Disable project for this build configuration"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_checkBoxDisableProject->SetValue(false);
    m_checkBoxDisableProject->SetToolTip(_("When checked, this project will be skipped completely during build"));
    
    flexGridSizer2->Add(m_checkBoxDisableProject, 0, wxALL, 5);
    
    m_staticText22 = new wxStaticText(m_generalPage, wxID_ANY, _("Project Type:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    flexGridSizer2->Add(m_staticText22, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    wxArrayString m_choiceProjectTypesArr;
    m_choiceProjectTypes = new wxChoice(m_generalPage, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), m_choiceProjectTypesArr, 0);
    
    flexGridSizer2->Add(m_choiceProjectTypes, 0, wxALL|wxEXPAND, 5);
    
    m_staticText191 = new wxStaticText(m_generalPage, wxID_ANY, _("Selected Compiler:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    flexGridSizer2->Add(m_staticText191, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    wxArrayString m_choiceCompilerTypeArr;
    m_choiceCompilerType = new wxChoice(m_generalPage, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), m_choiceCompilerTypeArr, 0);
    
    flexGridSizer2->Add(m_choiceCompilerType, 0, wxALL|wxEXPAND, 5);
    
    m_staticText231 = new wxStaticText(m_generalPage, wxID_ANY, _("Debugger:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    flexGridSizer2->Add(m_staticText231, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    wxArrayString m_choiceDebuggerArr;
    m_choiceDebugger = new wxChoice(m_generalPage, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), m_choiceDebuggerArr, 0);
    
    flexGridSizer2->Add(m_choiceDebugger, 0, wxALL|wxEXPAND, 5);
    
    m_staticText15 = new wxStaticText(m_generalPage, wxID_ANY, _("Output File:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    flexGridSizer2->Add(m_staticText15, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textOutputFilePicker = new wxTextCtrl(m_generalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_NO_VSCROLL);
    
    flexGridSizer2->Add(m_textOutputFilePicker, 0, wxALL|wxEXPAND, 5);
    
    m_staticText16 = new wxStaticText(m_generalPage, wxID_ANY, _("Intermediate Folder:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    flexGridSizer2->Add(m_staticText16, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    wxBoxSizer* boxSizer4 = new wxBoxSizer(wxHORIZONTAL);
    
    flexGridSizer2->Add(boxSizer4, 0, wxEXPAND, 5);
    
    m_textCtrlItermediateDir = new wxTextCtrl(m_generalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_NO_VSCROLL);
    
    boxSizer4->Add(m_textCtrlItermediateDir, 1, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_buttonBrowseIM_WD = new wxButton(m_generalPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), 0);
    
    boxSizer4->Add(m_buttonBrowseIM_WD, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    m_staticText17 = new wxStaticText(m_generalPage, wxID_ANY, _("Program to Debug / Run:"), wxDefaultPosition, wxSize(-1, -1), 0);
    wxFont m_staticText17Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText17Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText17->SetFont(m_staticText17Font);
    
    bSizer19->Add(m_staticText17, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    wxFlexGridSizer* flexGridSizer6 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer6->SetFlexibleDirection( wxBOTH );
    flexGridSizer6->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6->AddGrowableCol(1);
    
    bSizer19->Add(flexGridSizer6, 0, wxEXPAND|wxALIGN_CENTER_HORIZONTAL, 5);
    
    flexGridSizer6->Add(0, 0, 1, wxALL, 5);
    
    m_checkBoxGUI = new wxCheckBox(m_generalPage, wxID_ANY, _("This is a GUI application"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_checkBoxGUI->SetValue(false);
    m_checkBoxGUI->SetToolTip(_("When checked, codelite will run the executable as is without wrapping the command with a shell"));
    
    flexGridSizer6->Add(m_checkBoxGUI, 0, wxALL, 5);
    
    flexGridSizer6->Add(0, 0, 1, wxALL, 5);
    
    m_staticText18 = new wxStaticText(m_generalPage, wxID_ANY, _("Program:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    flexGridSizer6->Add(m_staticText18, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCommand = new wxTextCtrl(m_generalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_NO_VSCROLL);
    
    flexGridSizer6->Add(m_textCommand, 0, wxALL|wxEXPAND, 5);
    
    m_buttonBrowseProgram = new wxButton(m_generalPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), 0);
    
    flexGridSizer6->Add(m_buttonBrowseProgram, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_staticText20 = new wxStaticText(m_generalPage, wxID_ANY, _("Working Directory:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    flexGridSizer6->Add(m_staticText20, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrlCommandWD = new wxTextCtrl(m_generalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_NO_VSCROLL);
    
    flexGridSizer6->Add(m_textCtrlCommandWD, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    m_buttonBrowseCommandWD = new wxButton(m_generalPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), 0);
    
    flexGridSizer6->Add(m_buttonBrowseCommandWD, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_staticText19 = new wxStaticText(m_generalPage, wxID_ANY, _("Program Arguments:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    flexGridSizer6->Add(m_staticText19, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCommandArguments = new wxTextCtrl(m_generalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_NO_VSCROLL);
    
    flexGridSizer6->Add(m_textCommandArguments, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    flexGridSizer6->Add(0, 0, 0, wxALL, 5);
    
    flexGridSizer6->Add(0, 0, 1, wxALL, 5);
    
    m_checkBoxUseDebugArgs = new wxCheckBox(m_generalPage, wxID_ANY, _("Use separate debug arguments"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxUseDebugArgs->SetValue(false);
    m_checkBoxUseDebugArgs->SetToolTip(_("When enabled, codelite will use the arguments specified in the 'Debug Arguments' when running the program under debugger. \nOtherwise, codelite will use the arguments speicified in the 'Program Arguments' field"));
    
    flexGridSizer6->Add(m_checkBoxUseDebugArgs, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    flexGridSizer6->Add(0, 0, 1, wxALL, 5);
    
    m_staticText112 = new wxStaticText(m_generalPage, wxID_ANY, _("Debugger Arguments:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer6->Add(m_staticText112, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrlDebugArgs = new wxTextCtrl(m_generalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_NO_VSCROLL);
    
    flexGridSizer6->Add(m_textCtrlDebugArgs, 0, wxALL|wxEXPAND, 5);
    
    flexGridSizer6->Add(0, 0, 0, wxALL, 5);
    
    bSizer19->Add(0, 0, 1, wxALL, 5);
    
    wxBoxSizer* bSizer17 = new wxBoxSizer(wxHORIZONTAL);
    
    bSizer19->Add(bSizer17, 0, wxALIGN_LEFT, 5);
    
    m_checkBoxPauseWhenExecEnds = new wxCheckBox(m_generalPage, wxID_ANY, _("Pause when execution ends"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxPauseWhenExecEnds->SetValue(false);
    
    bSizer17->Add(m_checkBoxPauseWhenExecEnds, 0, wxALL|wxALIGN_LEFT, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    m_checkBoxDisableProject->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSGeneralPageBase::OnEnableProject), NULL, this);
    m_staticText22->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnProjectCustumBuildUI), NULL, this);
    m_choiceProjectTypes->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_choiceProjectTypes->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnProjectCustumBuildUI), NULL, this);
    m_staticText191->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_choiceCompilerType->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_choiceCompilerType->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_staticText231->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_choiceDebugger->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_choiceDebugger->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_staticText15->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_textOutputFilePicker->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_textOutputFilePicker->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_staticText16->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_textCtrlItermediateDir->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_textCtrlItermediateDir->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_buttonBrowseIM_WD->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSGeneralPageBase::OnBrowseIntermediateDir), NULL, this);
    m_buttonBrowseIM_WD->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_staticText17->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_checkBoxGUI->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_checkBoxGUI->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_staticText18->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_textCommand->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_textCommand->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_buttonBrowseProgram->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSGeneralPageBase::OnBrowseProgram), NULL, this);
    m_buttonBrowseProgram->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_staticText20->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_textCtrlCommandWD->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_textCtrlCommandWD->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_buttonBrowseCommandWD->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSGeneralPageBase::OnBrowseCommandWD), NULL, this);
    m_buttonBrowseCommandWD->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_staticText19->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_textCommandArguments->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_textCommandArguments->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_checkBoxUseDebugArgs->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_checkBoxUseDebugArgs->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_staticText112->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_textCtrlDebugArgs->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_textCtrlDebugArgs->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnUseDebugArgsUI), NULL, this);
    m_checkBoxPauseWhenExecEnds->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_checkBoxPauseWhenExecEnds->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    
}

PSGeneralPageBase::~PSGeneralPageBase()
{
    m_checkBoxDisableProject->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSGeneralPageBase::OnEnableProject), NULL, this);
    m_staticText22->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnProjectCustumBuildUI), NULL, this);
    m_choiceProjectTypes->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_choiceProjectTypes->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnProjectCustumBuildUI), NULL, this);
    m_staticText191->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_choiceCompilerType->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_choiceCompilerType->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_staticText231->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_choiceDebugger->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_choiceDebugger->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_staticText15->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_textOutputFilePicker->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_textOutputFilePicker->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_staticText16->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_textCtrlItermediateDir->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_textCtrlItermediateDir->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_buttonBrowseIM_WD->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSGeneralPageBase::OnBrowseIntermediateDir), NULL, this);
    m_buttonBrowseIM_WD->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_staticText17->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_checkBoxGUI->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_checkBoxGUI->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_staticText18->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_textCommand->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_textCommand->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_buttonBrowseProgram->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSGeneralPageBase::OnBrowseProgram), NULL, this);
    m_buttonBrowseProgram->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_staticText20->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_textCtrlCommandWD->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_textCtrlCommandWD->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_buttonBrowseCommandWD->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSGeneralPageBase::OnBrowseCommandWD), NULL, this);
    m_buttonBrowseCommandWD->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_staticText19->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_textCommandArguments->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_textCommandArguments->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_checkBoxUseDebugArgs->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_checkBoxUseDebugArgs->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_staticText112->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    m_textCtrlDebugArgs->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_textCtrlDebugArgs->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnUseDebugArgsUI), NULL, this);
    m_checkBoxPauseWhenExecEnds->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSGeneralPageBase::OnCmdEvtVModified), NULL, this);
    m_checkBoxPauseWhenExecEnds->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSGeneralPageBase::OnConfigurationEnabledUI), NULL, this);
    
}

PSCompilerPageBase::PSCompilerPageBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCA3F0InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer36 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer36);
    
    m_compilerPage = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    
    bSizer36->Add(m_compilerPage, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* compilerPageSizer = new wxBoxSizer(wxVERTICAL);
    m_compilerPage->SetSizer(compilerPageSizer);
    
    m_checkCompilerNeeded = new wxCheckBox(m_compilerPage, wxID_ANY, _("Compiler is not required for this project"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkCompilerNeeded->SetValue(false);
    
    compilerPageSizer->Add(m_checkCompilerNeeded, 0, wxRIGHT|wxTOP|wxBOTTOM|wxALIGN_CENTER_HORIZONTAL, 5);
    
    wxStaticBoxSizer* sbSizer3 = new wxStaticBoxSizer( new wxStaticBox(m_compilerPage, wxID_ANY, _("Compiler Options:")), wxVERTICAL);
    
    compilerPageSizer->Add(sbSizer3, 1, wxALL|wxEXPAND, 5);
    
    wxFlexGridSizer* flexGridSizer15 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer15->SetFlexibleDirection( wxBOTH );
    flexGridSizer15->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer15->AddGrowableCol(1);
    
    sbSizer3->Add(flexGridSizer15, 1, wxEXPAND, 5);
    
    m_staticText331 = new wxStaticText(m_compilerPage, wxID_ANY, _("Use with Global Settings:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    flexGridSizer15->Add(m_staticText331, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    wxArrayString m_choiceCmpUseWithGlobalSettingsArr;
    m_choiceCmpUseWithGlobalSettings = new wxChoice(m_compilerPage, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), m_choiceCmpUseWithGlobalSettingsArr, 0);
    
    flexGridSizer15->Add(m_choiceCmpUseWithGlobalSettings, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    flexGridSizer15->Add(0, 0, 0, wxALL, 5);
    
    m_staticText6 = new wxStaticText(m_compilerPage, wxID_ANY, _("C++ Compiler Options:"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_staticText6->SetToolTip(_("Additional compiler options to pass to the compiler provided as a semi-colon delimited list"));
    
    flexGridSizer15->Add(m_staticText6, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCompilerOptions = new wxTextCtrl(m_compilerPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_NO_VSCROLL);
    m_textCompilerOptions->SetToolTip(_("Additional compiler options to pass to the compiler provided as a semi-colon delimited list"));
    
    flexGridSizer15->Add(m_textCompilerOptions, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    m_buttonCompilerOptions = new wxButton(m_compilerPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), wxBU_EXACTFIT);
    
    flexGridSizer15->Add(m_buttonCompilerOptions, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    m_staticText45 = new wxStaticText(m_compilerPage, wxID_ANY, _("C Compiler Options:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    flexGridSizer15->Add(m_staticText45, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrlCCompilerOptions = new wxTextCtrl(m_compilerPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_NO_VSCROLL);
    m_textCtrlCCompilerOptions->SetToolTip(_("Additional C compiler options to pass to the compiler provided as a semi-colon delimited list (used for C files only)"));
    
    flexGridSizer15->Add(m_textCtrlCCompilerOptions, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    m_button35 = new wxButton(m_compilerPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), wxBU_EXACTFIT);
    
    flexGridSizer15->Add(m_button35, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    m_staticText94 = new wxStaticText(m_compilerPage, wxID_ANY, _("Assembler Options:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer15->Add(m_staticText94, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrlAssemblerOptions = new wxTextCtrl(m_compilerPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    m_textCtrlAssemblerOptions->SetToolTip(_("Additional C compiler options to pass to the assembler provided as a semi-colon delimited list\n(used for .s files only)"));
    
    flexGridSizer15->Add(m_textCtrlAssemblerOptions, 0, wxALL|wxEXPAND, 5);
    
    m_button98 = new wxButton(m_compilerPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1,-1), wxBU_EXACTFIT);
    
    flexGridSizer15->Add(m_button98, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    m_staticText4 = new wxStaticText(m_compilerPage, wxID_ANY, _("Include Paths:"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_staticText4->SetToolTip(_("Include path to pass to the compiler (provided as semi-colon delimited list)"));
    
    flexGridSizer15->Add(m_staticText4, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textAdditionalSearchPath = new wxTextCtrl(m_compilerPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_NO_VSCROLL);
    m_textAdditionalSearchPath->SetToolTip(_("Include path to pass to the compiler (provided as semi-colon delimited list)"));
    
    flexGridSizer15->Add(m_textAdditionalSearchPath, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    m_buttonAddSearchPath = new wxButton(m_compilerPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), wxBU_EXACTFIT);
    
    flexGridSizer15->Add(m_buttonAddSearchPath, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    m_staticText171 = new wxStaticText(m_compilerPage, wxID_ANY, _("Preprocessor:"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_staticText171->SetToolTip(_("macros (\"defines\") to pass to the compiler (provided as semi-colon delimited list)"));
    
    flexGridSizer15->Add(m_staticText171, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textPreprocessor = new wxTextCtrl(m_compilerPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_NO_VSCROLL);
    m_textPreprocessor->SetToolTip(_("macros (\"defines\") to pass to the compiler (provided as semi-colon delimited list)"));
    
    flexGridSizer15->Add(m_textPreprocessor, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    m_buttonAddPreprocessor = new wxButton(m_compilerPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), wxBU_EXACTFIT);
    
    flexGridSizer15->Add(m_buttonAddPreprocessor, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    wxStaticBoxSizer* sbSizer2 = new wxStaticBoxSizer( new wxStaticBox(m_compilerPage, wxID_ANY, _("Pre Compiled Headers:")), wxVERTICAL);
    
    compilerPageSizer->Add(sbSizer2, 0, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* bSizer33 = new wxBoxSizer(wxHORIZONTAL);
    
    sbSizer2->Add(bSizer33, 0, wxEXPAND, 5);
    
    m_textCtrlPreCompiledHeader = new wxTextCtrl(m_compilerPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_NO_VSCROLL);
    m_textCtrlPreCompiledHeader->SetToolTip(_("Specify here the pre-compiled header to use"));
    
    bSizer33->Add(m_textCtrlPreCompiledHeader, 1, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_buttonBrowsePreCompiledHeader = new wxButton(m_compilerPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), wxBU_EXACTFIT);
    
    bSizer33->Add(m_buttonBrowsePreCompiledHeader, 0, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_checkBoxPCHInCommandLine = new wxCheckBox(m_compilerPage, wxID_ANY, _("Explicitly include the PCH file in the command line using compiler switch"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxPCHInCommandLine->SetValue(false);
    
    sbSizer2->Add(m_checkBoxPCHInCommandLine, 0, wxALL|wxEXPAND, 5);
    
    m_checkBoxSeparatePCHFlags = new wxCheckBox(m_compilerPage, wxID_ANY, _("Use separate compilation flags for the PCH file:"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxSeparatePCHFlags->SetValue(false);
    
    sbSizer2->Add(m_checkBoxSeparatePCHFlags, 0, wxALL|wxEXPAND, 5);
    
    m_textCtrlPCHCompilationFlags = new wxTextCtrl(m_compilerPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_NO_VSCROLL);
    m_textCtrlPCHCompilationFlags->SetToolTip(_("Specify here different compiler flags for building the PCH file"));
    
    sbSizer2->Add(m_textCtrlPCHCompilationFlags, 0, wxALL|wxEXPAND, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    this->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnProjectEnabledUI), NULL, this);
    m_checkCompilerNeeded->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSCompilerPageBase::OnCheckCompilerNeeded), NULL, this);
    m_checkCompilerNeeded->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnProjectCustumBuildUI), NULL, this);
    m_staticText331->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_choiceCmpUseWithGlobalSettings->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_staticText6->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_textCompilerOptions->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCompilerPageBase::OnCmdEvtVModified), NULL, this);
    m_textCompilerOptions->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_buttonCompilerOptions->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSCompilerPageBase::OnButtonAddCompilerOptions), NULL, this);
    m_buttonCompilerOptions->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_staticText45->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_textCtrlCCompilerOptions->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCompilerPageBase::OnCmdEvtVModified), NULL, this);
    m_textCtrlCCompilerOptions->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_button35->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSCompilerPageBase::OnButtonAddCCompilerOptions), NULL, this);
    m_button35->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_staticText94->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_textCtrlAssemblerOptions->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCompilerPageBase::OnCmdEvtVModified), NULL, this);
    m_textCtrlAssemblerOptions->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_button98->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSCompilerPageBase::OnButtonAddAssemblerOptions), NULL, this);
    m_button98->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_staticText4->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_textAdditionalSearchPath->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCompilerPageBase::OnCmdEvtVModified), NULL, this);
    m_textAdditionalSearchPath->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_buttonAddSearchPath->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSCompilerPageBase::OnAddSearchPath), NULL, this);
    m_buttonAddSearchPath->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_staticText171->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_textPreprocessor->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCompilerPageBase::OnCmdEvtVModified), NULL, this);
    m_textPreprocessor->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_buttonAddPreprocessor->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSCompilerPageBase::OnButtonAddPreprocessor), NULL, this);
    m_buttonAddPreprocessor->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_textCtrlPreCompiledHeader->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCompilerPageBase::OnCmdEvtVModified), NULL, this);
    m_textCtrlPreCompiledHeader->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_buttonBrowsePreCompiledHeader->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSCompilerPageBase::OnBrowsePreCmpHeader), NULL, this);
    m_buttonBrowsePreCompiledHeader->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_checkBoxPCHInCommandLine->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSCompilerPageBase::OnCmdEvtVModified), NULL, this);
    m_checkBoxPCHInCommandLine->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_checkBoxSeparatePCHFlags->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSCompilerPageBase::OnCmdEvtVModified), NULL, this);
    m_checkBoxSeparatePCHFlags->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_textCtrlPCHCompilationFlags->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCompilerPageBase::OnCmdEvtVModified), NULL, this);
    m_textCtrlPCHCompilationFlags->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnEnablePCHFLagsUI), NULL, this);
    
}

PSCompilerPageBase::~PSCompilerPageBase()
{
    this->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnProjectEnabledUI), NULL, this);
    m_checkCompilerNeeded->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSCompilerPageBase::OnCheckCompilerNeeded), NULL, this);
    m_checkCompilerNeeded->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnProjectCustumBuildUI), NULL, this);
    m_staticText331->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_choiceCmpUseWithGlobalSettings->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_staticText6->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_textCompilerOptions->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCompilerPageBase::OnCmdEvtVModified), NULL, this);
    m_textCompilerOptions->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_buttonCompilerOptions->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSCompilerPageBase::OnButtonAddCompilerOptions), NULL, this);
    m_buttonCompilerOptions->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_staticText45->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_textCtrlCCompilerOptions->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCompilerPageBase::OnCmdEvtVModified), NULL, this);
    m_textCtrlCCompilerOptions->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_button35->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSCompilerPageBase::OnButtonAddCCompilerOptions), NULL, this);
    m_button35->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_staticText94->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_textCtrlAssemblerOptions->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCompilerPageBase::OnCmdEvtVModified), NULL, this);
    m_textCtrlAssemblerOptions->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_button98->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSCompilerPageBase::OnButtonAddAssemblerOptions), NULL, this);
    m_button98->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_staticText4->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_textAdditionalSearchPath->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCompilerPageBase::OnCmdEvtVModified), NULL, this);
    m_textAdditionalSearchPath->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_buttonAddSearchPath->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSCompilerPageBase::OnAddSearchPath), NULL, this);
    m_buttonAddSearchPath->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_staticText171->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_textPreprocessor->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCompilerPageBase::OnCmdEvtVModified), NULL, this);
    m_textPreprocessor->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_buttonAddPreprocessor->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSCompilerPageBase::OnButtonAddPreprocessor), NULL, this);
    m_buttonAddPreprocessor->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_textCtrlPreCompiledHeader->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCompilerPageBase::OnCmdEvtVModified), NULL, this);
    m_textCtrlPreCompiledHeader->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_buttonBrowsePreCompiledHeader->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSCompilerPageBase::OnBrowsePreCmpHeader), NULL, this);
    m_buttonBrowsePreCompiledHeader->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_checkBoxPCHInCommandLine->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSCompilerPageBase::OnCmdEvtVModified), NULL, this);
    m_checkBoxPCHInCommandLine->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_checkBoxSeparatePCHFlags->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSCompilerPageBase::OnCmdEvtVModified), NULL, this);
    m_checkBoxSeparatePCHFlags->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnCompiledNotNeededUI), NULL, this);
    m_textCtrlPCHCompilationFlags->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCompilerPageBase::OnCmdEvtVModified), NULL, this);
    m_textCtrlPCHCompilationFlags->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompilerPageBase::OnEnablePCHFLagsUI), NULL, this);
    
}

PSLinkPageBase::PSLinkPageBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCA3F0InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer37 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer37);
    
    m_linkerPage = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    
    bSizer37->Add(m_linkerPage, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* linkerPageSizer = new wxBoxSizer(wxVERTICAL);
    m_linkerPage->SetSizer(linkerPageSizer);
    
    m_checkLinkerNeeded = new wxCheckBox(m_linkerPage, wxID_ANY, _("Linker is not required for this project"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkLinkerNeeded->SetValue(false);
    
    linkerPageSizer->Add(m_checkLinkerNeeded, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    wxStaticBoxSizer* sbSizer4 = new wxStaticBoxSizer( new wxStaticBox(m_linkerPage, wxID_ANY, _("Linker Options:")), wxVERTICAL);
    
    linkerPageSizer->Add(sbSizer4, 0, wxALL|wxEXPAND, 5);
    
    wxFlexGridSizer* flexGridSizer21 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer21->SetFlexibleDirection( wxBOTH );
    flexGridSizer21->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer21->AddGrowableCol(1);
    
    sbSizer4->Add(flexGridSizer21, 1, wxEXPAND, 5);
    
    m_staticText3311 = new wxStaticText(m_linkerPage, wxID_ANY, _("Use with global settings :"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    flexGridSizer21->Add(m_staticText3311, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    wxArrayString m_choiceLnkUseWithGlobalSettingsArr;
    m_choiceLnkUseWithGlobalSettings = new wxChoice(m_linkerPage, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), m_choiceLnkUseWithGlobalSettingsArr, 0);
    
    flexGridSizer21->Add(m_choiceLnkUseWithGlobalSettings, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    flexGridSizer21->Add(0, 0, 0, wxALL, 5);
    
    m_staticText10 = new wxStaticText(m_linkerPage, wxID_ANY, _("Options:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    flexGridSizer21->Add(m_staticText10, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textLinkerOptions = new wxTextCtrl(m_linkerPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_NO_VSCROLL);
    
    flexGridSizer21->Add(m_textLinkerOptions, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    m_buttonLinkerOptions = new wxButton(m_linkerPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), wxBU_EXACTFIT);
    
    flexGridSizer21->Add(m_buttonLinkerOptions, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    m_staticText7 = new wxStaticText(m_linkerPage, wxID_ANY, _("Library Paths:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    flexGridSizer21->Add(m_staticText7, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textLibraryPath = new wxTextCtrl(m_linkerPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_NO_VSCROLL);
    
    flexGridSizer21->Add(m_textLibraryPath, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    m_buttonLibraryPath = new wxButton(m_linkerPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), wxBU_EXACTFIT);
    
    flexGridSizer21->Add(m_buttonLibraryPath, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    m_staticText8 = new wxStaticText(m_linkerPage, wxID_ANY, _("Libraries:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    flexGridSizer21->Add(m_staticText8, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textLibraries = new wxTextCtrl(m_linkerPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_NO_VSCROLL);
    m_textLibraries->SetToolTip(_("Enter any extra library names, separated by';' e.g. Foo  or  Foo;Bar"));
    
    flexGridSizer21->Add(m_textLibraries, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    m_buttonLibraries = new wxButton(m_linkerPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), wxBU_EXACTFIT);
    
    flexGridSizer21->Add(m_buttonLibraries, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    this->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnProjectEnabledUI), NULL, this);
    m_checkLinkerNeeded->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSLinkPageBase::OnCheckLinkerNeeded), NULL, this);
    m_checkLinkerNeeded->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnProjectCustumBuildUI), NULL, this);
    m_staticText3311->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    m_choiceLnkUseWithGlobalSettings->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    m_staticText10->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    m_textLinkerOptions->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSLinkPageBase::OnCmdEvtVModified), NULL, this);
    m_textLinkerOptions->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    m_buttonLinkerOptions->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSLinkPageBase::OnButtonAddLinkerOptions), NULL, this);
    m_buttonLinkerOptions->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    m_staticText7->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    m_textLibraryPath->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSLinkPageBase::OnCmdEvtVModified), NULL, this);
    m_textLibraryPath->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    m_buttonLibraryPath->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSLinkPageBase::OnAddLibraryPath), NULL, this);
    m_buttonLibraryPath->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    m_staticText8->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    m_textLibraries->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSLinkPageBase::OnCmdEvtVModified), NULL, this);
    m_textLibraries->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    m_buttonLibraries->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSLinkPageBase::OnAddLibrary), NULL, this);
    m_buttonLibraries->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    
}

PSLinkPageBase::~PSLinkPageBase()
{
    this->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnProjectEnabledUI), NULL, this);
    m_checkLinkerNeeded->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSLinkPageBase::OnCheckLinkerNeeded), NULL, this);
    m_checkLinkerNeeded->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnProjectCustumBuildUI), NULL, this);
    m_staticText3311->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    m_choiceLnkUseWithGlobalSettings->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    m_staticText10->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    m_textLinkerOptions->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSLinkPageBase::OnCmdEvtVModified), NULL, this);
    m_textLinkerOptions->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    m_buttonLinkerOptions->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSLinkPageBase::OnButtonAddLinkerOptions), NULL, this);
    m_buttonLinkerOptions->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    m_staticText7->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    m_textLibraryPath->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSLinkPageBase::OnCmdEvtVModified), NULL, this);
    m_textLibraryPath->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    m_buttonLibraryPath->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSLinkPageBase::OnAddLibraryPath), NULL, this);
    m_buttonLibraryPath->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    m_staticText8->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    m_textLibraries->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSLinkPageBase::OnCmdEvtVModified), NULL, this);
    m_textLibraries->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    m_buttonLibraries->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSLinkPageBase::OnAddLibrary), NULL, this);
    m_buttonLibraries->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSLinkPageBase::OnLinkerNotNeededUI), NULL, this);
    
}

PSDebuggerPageBase::PSDebuggerPageBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCA3F0InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer38 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer38);
    
    m_panelDebugger = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    
    bSizer38->Add(m_panelDebugger, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* bSizer192 = new wxBoxSizer(wxVERTICAL);
    m_panelDebugger->SetSizer(bSizer192);
    
    m_staticText321 = new wxStaticText(m_panelDebugger, wxID_ANY, _("Select debugger path. Leave empty to use the default:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer192->Add(m_staticText321, 0, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* boxSizer35 = new wxBoxSizer(wxHORIZONTAL);
    
    bSizer192->Add(boxSizer35, 0, wxEXPAND, 5);
    
    m_textCtrlDebuggerPath = new wxTextCtrl(m_panelDebugger, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    m_textCtrlDebuggerPath->SetFocus();
    
    boxSizer35->Add(m_textCtrlDebuggerPath, 1, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_button39 = new wxButton(m_panelDebugger, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer35->Add(m_button39, 0, wxLEFT|wxRIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_notebook67 = new wxNotebook(m_panelDebugger, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxBK_DEFAULT);
    
    bSizer192->Add(m_notebook67, 1, wxALL|wxEXPAND, 5);
    
    m_panel80 = new wxPanel(m_notebook67, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    m_notebook67->AddPage(m_panel80, _("Debugger Search Paths"), false);
    
    wxBoxSizer* boxSizer82 = new wxBoxSizer(wxHORIZONTAL);
    m_panel80->SetSizer(boxSizer82);
    
    m_dvListCtrlDebuggerSearchPaths = new wxDataViewListCtrl(m_panel80, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxDV_NO_HEADER|wxDV_ROW_LINES|wxDV_MULTIPLE|wxDV_SINGLE);
    
    boxSizer82->Add(m_dvListCtrlDebuggerSearchPaths, 1, wxALL|wxEXPAND, 5);
    
    m_dvListCtrlDebuggerSearchPaths->AppendTextColumn(_("Path"), wxDATAVIEW_CELL_INERT, -2, wxALIGN_LEFT);
    wxBoxSizer* boxSizer84 = new wxBoxSizer(wxVERTICAL);
    
    boxSizer82->Add(boxSizer84, 0, wxEXPAND, 5);
    
    m_button88 = new wxButton(m_panel80, wxID_ADD, _("&Add.."), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer84->Add(m_button88, 0, wxALL|wxEXPAND, 5);
    
    m_button90 = new wxButton(m_panel80, wxID_DELETE, _("&Delete..."), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer84->Add(m_button90, 0, wxALL|wxEXPAND, 5);
    
    m_panel71 = new wxPanel(m_notebook67, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    m_notebook67->AddPage(m_panel71, _("Startup Commands"), false);
    
    wxBoxSizer* boxSizer76 = new wxBoxSizer(wxVERTICAL);
    m_panel71->SetSizer(boxSizer76);
    
    m_staticText301 = new wxStaticText(m_panel71, wxID_ANY, _("Enter here any commands that should be passed to the debugger on startup:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    boxSizer76->Add(m_staticText301, 0, wxALL, 5);
    
    m_textCtrlDbgCmds = new wxTextCtrl(m_panel71, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_RICH2|wxTE_MULTILINE|wxTE_DONTWRAP);
    wxFont m_textCtrlDbgCmdsFont(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Arial"));
    m_textCtrlDbgCmds->SetFont(m_textCtrlDbgCmdsFont);
    
    boxSizer76->Add(m_textCtrlDbgCmds, 1, wxALL|wxEXPAND, 5);
    
    m_panel74 = new wxPanel(m_notebook67, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    m_notebook67->AddPage(m_panel74, _("Remote Attach Commands"), false);
    
    wxBoxSizer* boxSizer78 = new wxBoxSizer(wxVERTICAL);
    m_panel74->SetSizer(boxSizer78);
    
    m_staticText311 = new wxStaticText(m_panel74, wxID_ANY, _("Enter here any commands that should be passed to the debugger after attaching the remote target:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    boxSizer78->Add(m_staticText311, 0, wxALL|wxEXPAND, 5);
    
    m_textCtrlDbgPostConnectCmds = new wxTextCtrl(m_panel74, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_RICH2|wxTE_MULTILINE|wxTE_DONTWRAP);
    wxFont m_textCtrlDbgPostConnectCmdsFont(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Arial"));
    m_textCtrlDbgPostConnectCmds->SetFont(m_textCtrlDbgPostConnectCmdsFont);
    
    boxSizer78->Add(m_textCtrlDbgPostConnectCmds, 1, wxALL|wxEXPAND, 5);
    
    m_checkBoxDbgRemote = new wxCheckBox(m_panelDebugger, wxID_ANY, _("Debugging a remote target"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxDbgRemote->SetValue(false);
    
    bSizer192->Add(m_checkBoxDbgRemote, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    wxFlexGridSizer* fgSizer61 = new wxFlexGridSizer(1, 4, 0, 0);
    fgSizer61->SetFlexibleDirection( wxBOTH );
    fgSizer61->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    fgSizer61->AddGrowableCol(1);
    
    bSizer192->Add(fgSizer61, 0, wxEXPAND, 5);
    
    m_staticText31 = new wxStaticText(m_panelDebugger, wxID_ANY, _("Host / tty:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer61->Add(m_staticText31, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrl1DbgHost = new wxTextCtrl(m_panelDebugger, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_NO_VSCROLL);
    
    fgSizer61->Add(m_textCtrl1DbgHost, 0, wxALL|wxEXPAND, 5);
    
    m_staticText32 = new wxStaticText(m_panelDebugger, wxID_ANY, _("Port:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer61->Add(m_staticText32, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrlDbgPort = new wxTextCtrl(m_panelDebugger, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_NO_VSCROLL);
    
    fgSizer61->Add(m_textCtrlDbgPort, 0, wxALL, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    this->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSDebuggerPageBase::OnProjectEnabledUI), NULL, this);
    m_button39->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSDebuggerPageBase::OnBrowseForDebuggerPath), NULL, this);
    m_dvListCtrlDebuggerSearchPaths->Connect(wxEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED, wxDataViewEventHandler(PSDebuggerPageBase::OnItemActivated), NULL, this);
    m_button88->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSDebuggerPageBase::OnAddDebuggerSearchPath), NULL, this);
    m_button90->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSDebuggerPageBase::OnDeleteDebuggerSearchPath), NULL, this);
    m_button90->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSDebuggerPageBase::OnDeleteDebuggerSearchPathUI), NULL, this);
    m_textCtrlDbgCmds->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSDebuggerPageBase::OnCmdEvtVModified), NULL, this);
    m_textCtrlDbgPostConnectCmds->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSDebuggerPageBase::OnCmdEvtVModified), NULL, this);
    m_checkBoxDbgRemote->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSDebuggerPageBase::OnCmdEvtVModified), NULL, this);
    m_staticText31->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSDebuggerPageBase::OnRemoteDebugUI), NULL, this);
    m_textCtrl1DbgHost->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSDebuggerPageBase::OnCmdEvtVModified), NULL, this);
    m_textCtrl1DbgHost->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSDebuggerPageBase::OnRemoteDebugUI), NULL, this);
    m_staticText32->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSDebuggerPageBase::OnRemoteDebugUI), NULL, this);
    m_textCtrlDbgPort->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSDebuggerPageBase::OnCmdEvtVModified), NULL, this);
    m_textCtrlDbgPort->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSDebuggerPageBase::OnRemoteDebugUI), NULL, this);
    
}

PSDebuggerPageBase::~PSDebuggerPageBase()
{
    this->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSDebuggerPageBase::OnProjectEnabledUI), NULL, this);
    m_button39->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSDebuggerPageBase::OnBrowseForDebuggerPath), NULL, this);
    m_dvListCtrlDebuggerSearchPaths->Disconnect(wxEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED, wxDataViewEventHandler(PSDebuggerPageBase::OnItemActivated), NULL, this);
    m_button88->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSDebuggerPageBase::OnAddDebuggerSearchPath), NULL, this);
    m_button90->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSDebuggerPageBase::OnDeleteDebuggerSearchPath), NULL, this);
    m_button90->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSDebuggerPageBase::OnDeleteDebuggerSearchPathUI), NULL, this);
    m_textCtrlDbgCmds->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSDebuggerPageBase::OnCmdEvtVModified), NULL, this);
    m_textCtrlDbgPostConnectCmds->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSDebuggerPageBase::OnCmdEvtVModified), NULL, this);
    m_checkBoxDbgRemote->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSDebuggerPageBase::OnCmdEvtVModified), NULL, this);
    m_staticText31->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSDebuggerPageBase::OnRemoteDebugUI), NULL, this);
    m_textCtrl1DbgHost->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSDebuggerPageBase::OnCmdEvtVModified), NULL, this);
    m_textCtrl1DbgHost->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSDebuggerPageBase::OnRemoteDebugUI), NULL, this);
    m_staticText32->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSDebuggerPageBase::OnRemoteDebugUI), NULL, this);
    m_textCtrlDbgPort->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSDebuggerPageBase::OnCmdEvtVModified), NULL, this);
    m_textCtrlDbgPort->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSDebuggerPageBase::OnRemoteDebugUI), NULL, this);
    
}

PSResourcesPageBase::PSResourcesPageBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCA3F0InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer39 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer39);
    
    m_resourceCmpPage = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    
    bSizer39->Add(m_resourceCmpPage, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* bSizer151 = new wxBoxSizer(wxVERTICAL);
    m_resourceCmpPage->SetSizer(bSizer151);
    
    wxFlexGridSizer* flexGridSizer25 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer25->SetFlexibleDirection( wxBOTH );
    flexGridSizer25->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer25->AddGrowableCol(1);
    
    bSizer151->Add(flexGridSizer25, 1, wxEXPAND, 5);
    
    m_staticText33111 = new wxStaticText(m_resourceCmpPage, wxID_ANY, _("Use with global settings :"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    flexGridSizer25->Add(m_staticText33111, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    wxArrayString m_choiceResUseWithGlobalSettingsArr;
    m_choiceResUseWithGlobalSettings = new wxChoice(m_resourceCmpPage, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), m_choiceResUseWithGlobalSettingsArr, 0);
    
    flexGridSizer25->Add(m_choiceResUseWithGlobalSettings, 0, wxALL|wxEXPAND|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    
    flexGridSizer25->Add(0, 0, 0, 0, 5);
    
    flexGridSizer25->Add(0, 0, 0, 0, 5);
    
    flexGridSizer25->Add(0, 0, 0, 0, 5);
    
    flexGridSizer25->Add(0, 0, 0, 0, 5);
    
    m_staticText221 = new wxStaticText(m_resourceCmpPage, wxID_ANY, _("Compiler Options:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    flexGridSizer25->Add(m_staticText221, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textAddResCmpOptions = new wxTextCtrl(m_resourceCmpPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_NO_VSCROLL);
    
    flexGridSizer25->Add(m_textAddResCmpOptions, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    m_buttonAddResCmpOptions = new wxButton(m_resourceCmpPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), wxBU_EXACTFIT);
    
    flexGridSizer25->Add(m_buttonAddResCmpOptions, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    m_staticText23 = new wxStaticText(m_resourceCmpPage, wxID_ANY, _("Include Paths:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    flexGridSizer25->Add(m_staticText23, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textAddResCmpPath = new wxTextCtrl(m_resourceCmpPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_NO_VSCROLL);
    
    flexGridSizer25->Add(m_textAddResCmpPath, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    m_buttonAddResCmpPath = new wxButton(m_resourceCmpPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), wxBU_EXACTFIT);
    
    flexGridSizer25->Add(m_buttonAddResCmpPath, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    this->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSResourcesPageBase::OnProjectEnabledUI), NULL, this);
    m_staticText33111->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSResourcesPageBase::OnrResourceCompilerNotNeededUI), NULL, this);
    m_choiceResUseWithGlobalSettings->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSResourcesPageBase::OnrResourceCompilerNotNeededUI), NULL, this);
    m_staticText221->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSResourcesPageBase::OnrResourceCompilerNotNeededUI), NULL, this);
    m_textAddResCmpOptions->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSResourcesPageBase::OnCmdEvtVModified), NULL, this);
    m_textAddResCmpOptions->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSResourcesPageBase::OnrResourceCompilerNotNeededUI), NULL, this);
    m_buttonAddResCmpOptions->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSResourcesPageBase::OnResourceCmpAddOption), NULL, this);
    m_buttonAddResCmpOptions->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSResourcesPageBase::OnrResourceCompilerNotNeededUI), NULL, this);
    m_staticText23->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSResourcesPageBase::OnrResourceCompilerNotNeededUI), NULL, this);
    m_textAddResCmpPath->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSResourcesPageBase::OnCmdEvtVModified), NULL, this);
    m_textAddResCmpPath->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSResourcesPageBase::OnrResourceCompilerNotNeededUI), NULL, this);
    m_buttonAddResCmpPath->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSResourcesPageBase::OnResourceCmpAddPath), NULL, this);
    m_buttonAddResCmpPath->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSResourcesPageBase::OnrResourceCompilerNotNeededUI), NULL, this);
    
}

PSResourcesPageBase::~PSResourcesPageBase()
{
    this->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSResourcesPageBase::OnProjectEnabledUI), NULL, this);
    m_staticText33111->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSResourcesPageBase::OnrResourceCompilerNotNeededUI), NULL, this);
    m_choiceResUseWithGlobalSettings->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSResourcesPageBase::OnrResourceCompilerNotNeededUI), NULL, this);
    m_staticText221->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSResourcesPageBase::OnrResourceCompilerNotNeededUI), NULL, this);
    m_textAddResCmpOptions->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSResourcesPageBase::OnCmdEvtVModified), NULL, this);
    m_textAddResCmpOptions->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSResourcesPageBase::OnrResourceCompilerNotNeededUI), NULL, this);
    m_buttonAddResCmpOptions->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSResourcesPageBase::OnResourceCmpAddOption), NULL, this);
    m_buttonAddResCmpOptions->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSResourcesPageBase::OnrResourceCompilerNotNeededUI), NULL, this);
    m_staticText23->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSResourcesPageBase::OnrResourceCompilerNotNeededUI), NULL, this);
    m_textAddResCmpPath->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSResourcesPageBase::OnCmdEvtVModified), NULL, this);
    m_textAddResCmpPath->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSResourcesPageBase::OnrResourceCompilerNotNeededUI), NULL, this);
    m_buttonAddResCmpPath->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSResourcesPageBase::OnResourceCmpAddPath), NULL, this);
    m_buttonAddResCmpPath->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSResourcesPageBase::OnrResourceCompilerNotNeededUI), NULL, this);
    
}

PSEnvironmentBasePage::PSEnvironmentBasePage(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCA3F0InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer44 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer44);
    
    m_panelEnv = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    
    bSizer44->Add(m_panelEnv, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* bSizer34 = new wxBoxSizer(wxVERTICAL);
    m_panelEnv->SetSizer(bSizer34);
    
    wxFlexGridSizer* fgSizer12 = new wxFlexGridSizer(0, 2, 0, 0);
    fgSizer12->SetFlexibleDirection( wxBOTH );
    fgSizer12->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    fgSizer12->AddGrowableCol(1);
    
    bSizer34->Add(fgSizer12, 0, wxEXPAND, 5);
    
    m_staticText44 = new wxStaticText(m_panelEnv, wxID_ANY, _("Environment variable set to use:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer12->Add(m_staticText44, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    wxArrayString m_choiceEnvArr;
    m_choiceEnv = new wxChoice(m_panelEnv, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), m_choiceEnvArr, 0);
    
    fgSizer12->Add(m_choiceEnv, 0, wxALL|wxEXPAND, 5);
    
    m_staticText45 = new wxStaticText(m_panelEnv, wxID_ANY, _("Debugger 'PreDefined Types' set to use:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer12->Add(m_staticText45, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    wxArrayString m_choiceDbgEnvArr;
    m_choiceDbgEnv = new wxChoice(m_panelEnv, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), m_choiceDbgEnvArr, 0);
    
    fgSizer12->Add(m_choiceDbgEnv, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    m_staticline12 = new wxStaticLine(m_panelEnv, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxLI_HORIZONTAL);
    
    bSizer34->Add(m_staticline12, 0, wxALL|wxEXPAND, 5);
    
    m_staticText47 = new wxStaticText(m_panelEnv, wxID_ANY, _("Additional environment variables:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer34->Add(m_staticText47, 0, wxALL, 5);
    
    m_textCtrlEnvvars = new wxTextCtrl(m_panelEnv, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_RICH2|wxTE_PROCESS_TAB|wxTE_PROCESS_ENTER|wxTE_MULTILINE);
    
    bSizer34->Add(m_textCtrlEnvvars, 1, wxALL|wxEXPAND, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    this->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSEnvironmentBasePage::OnProjectEnabledUI), NULL, this);
    m_choiceEnv->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(PSEnvironmentBasePage::OnCmdEvtVModified), NULL, this);
    m_choiceDbgEnv->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(PSEnvironmentBasePage::OnCmdEvtVModified), NULL, this);
    m_textCtrlEnvvars->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSEnvironmentBasePage::OnCmdEvtVModified), NULL, this);
    
}

PSEnvironmentBasePage::~PSEnvironmentBasePage()
{
    this->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSEnvironmentBasePage::OnProjectEnabledUI), NULL, this);
    m_choiceEnv->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(PSEnvironmentBasePage::OnCmdEvtVModified), NULL, this);
    m_choiceDbgEnv->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(PSEnvironmentBasePage::OnCmdEvtVModified), NULL, this);
    m_textCtrlEnvvars->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSEnvironmentBasePage::OnCmdEvtVModified), NULL, this);
    
}

PSBuildEventsBasePage::PSBuildEventsBasePage(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCA3F0InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer41 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer41);
    
    m_preBuildPage = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    
    bSizer41->Add(m_preBuildPage, 1, wxEXPAND, 5);
    
    wxBoxSizer* bSizer8 = new wxBoxSizer(wxVERTICAL);
    m_preBuildPage->SetSizer(bSizer8);
    
    m_staticText11 = new wxStaticText(m_preBuildPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer8->Add(m_staticText11, 0, wxLEFT|wxRIGHT|wxEXPAND|wxALIGN_CENTER_HORIZONTAL, 5);
    
    wxBoxSizer* bSizer9 = new wxBoxSizer(wxHORIZONTAL);
    
    bSizer8->Add(bSizer9, 1, wxEXPAND, 5);
    
    m_textCtrlBuildEvents = new wxTextCtrl(m_preBuildPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_RICH2|wxTE_PROCESS_TAB|wxTE_PROCESS_ENTER|wxTE_MULTILINE);
    #ifdef __WXMSW__
    // To get the newer version of the font on MSW, we use font wxSYS_DEFAULT_GUI_FONT with family set to wxFONTFAMILY_TELETYPE
    wxFont m_textCtrlBuildEventsFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_textCtrlBuildEventsFont.SetFamily(wxFONTFAMILY_TELETYPE);
    #else
    wxFont m_textCtrlBuildEventsFont = wxSystemSettings::GetFont(wxSYS_ANSI_FIXED_FONT);
    m_textCtrlBuildEventsFont.SetFamily(wxFONTFAMILY_TELETYPE);
    #endif
    m_textCtrlBuildEvents->SetFont(m_textCtrlBuildEventsFont);
    
    bSizer9->Add(m_textCtrlBuildEvents, 1, wxALL|wxEXPAND, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    this->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSBuildEventsBasePage::OnProjectEnabledUI), NULL, this);
    
}

PSBuildEventsBasePage::~PSBuildEventsBasePage()
{
    this->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSBuildEventsBasePage::OnProjectEnabledUI), NULL, this);
    
}

PSCustomBuildBasePage::PSCustomBuildBasePage(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCA3F0InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer42 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer42);
    
    m_customBuildPage = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    
    bSizer42->Add(m_customBuildPage, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* bSizer15 = new wxBoxSizer(wxVERTICAL);
    m_customBuildPage->SetSizer(bSizer15);
    
    m_checkEnableCustomBuild = new wxCheckBox(m_customBuildPage, wxID_ANY, _("Enable custom build"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkEnableCustomBuild->SetValue(false);
    
    bSizer15->Add(m_checkEnableCustomBuild, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    m_staticline12 = new wxStaticLine(m_customBuildPage, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxLI_HORIZONTAL);
    
    bSizer15->Add(m_staticline12, 0, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* bSizer23 = new wxBoxSizer(wxHORIZONTAL);
    
    bSizer15->Add(bSizer23, 0, wxEXPAND, 5);
    
    m_staticText33 = new wxStaticText(m_customBuildPage, wxID_ANY, _("Working Directory:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer23->Add(m_staticText33, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrlCustomBuildWD = new wxTextCtrl(m_customBuildPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer23->Add(m_textCtrlCustomBuildWD, 1, wxALL|wxEXPAND, 5);
    
    m_buttonBrowseCustomBuildWD = new wxButton(m_customBuildPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer23->Add(m_buttonBrowseCustomBuildWD, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    wxBoxSizer* bSizer211 = new wxBoxSizer(wxHORIZONTAL);
    
    bSizer15->Add(bSizer211, 1, wxEXPAND, 5);
    
    m_listCtrlTargets = new wxListCtrl(m_customBuildPage, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxLC_VRULES|wxLC_HRULES|wxLC_SINGLE_SEL|wxLC_REPORT|wxBORDER_THEME);
    
    bSizer211->Add(m_listCtrlTargets, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* bSizer221 = new wxBoxSizer(wxVERTICAL);
    
    bSizer211->Add(bSizer221, 0, wxEXPAND, 5);
    
    m_buttonNewCustomTarget = new wxButton(m_customBuildPage, wxID_ANY, _("New..."), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer221->Add(m_buttonNewCustomTarget, 0, wxALL, 5);
    
    m_buttonEditCustomTarget = new wxButton(m_customBuildPage, wxID_ANY, _("Edit..."), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer221->Add(m_buttonEditCustomTarget, 0, wxALL, 5);
    
    m_buttonDeleteCustomTarget = new wxButton(m_customBuildPage, wxID_ANY, _("Delete"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer221->Add(m_buttonDeleteCustomTarget, 0, wxALL, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    this->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomBuildBasePage::OnProjectEnabledUI), NULL, this);
    m_checkEnableCustomBuild->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSCustomBuildBasePage::OnCustomBuildEnabled), NULL, this);
    m_checkEnableCustomBuild->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomBuildBasePage::OnCustomBuildCBEnabledUI), NULL, this);
    m_staticText33->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomBuildBasePage::OnCustomBuildEnabledUI), NULL, this);
    m_textCtrlCustomBuildWD->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCustomBuildBasePage::OnCmdEvtVModified), NULL, this);
    m_textCtrlCustomBuildWD->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomBuildBasePage::OnCustomBuildEnabledUI), NULL, this);
    m_buttonBrowseCustomBuildWD->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSCustomBuildBasePage::OnBrowseCustomBuildWD), NULL, this);
    m_buttonBrowseCustomBuildWD->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomBuildBasePage::OnCustomBuildEnabledUI), NULL, this);
    m_listCtrlTargets->Connect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(PSCustomBuildBasePage::OnItemActivated), NULL, this);
    m_listCtrlTargets->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(PSCustomBuildBasePage::OnItemSelected), NULL, this);
    m_listCtrlTargets->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomBuildBasePage::OnCustomBuildEnabledUI), NULL, this);
    m_buttonNewCustomTarget->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSCustomBuildBasePage::OnNewTarget), NULL, this);
    m_buttonNewCustomTarget->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomBuildBasePage::OnCustomBuildEnabledUI), NULL, this);
    m_buttonEditCustomTarget->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSCustomBuildBasePage::OnEditTarget), NULL, this);
    m_buttonEditCustomTarget->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomBuildBasePage::OnEditTargetUI), NULL, this);
    m_buttonDeleteCustomTarget->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSCustomBuildBasePage::OnDeleteTarget), NULL, this);
    m_buttonDeleteCustomTarget->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomBuildBasePage::OnDeleteTargetUI), NULL, this);
    
}

PSCustomBuildBasePage::~PSCustomBuildBasePage()
{
    this->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomBuildBasePage::OnProjectEnabledUI), NULL, this);
    m_checkEnableCustomBuild->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSCustomBuildBasePage::OnCustomBuildEnabled), NULL, this);
    m_checkEnableCustomBuild->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomBuildBasePage::OnCustomBuildCBEnabledUI), NULL, this);
    m_staticText33->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomBuildBasePage::OnCustomBuildEnabledUI), NULL, this);
    m_textCtrlCustomBuildWD->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCustomBuildBasePage::OnCmdEvtVModified), NULL, this);
    m_textCtrlCustomBuildWD->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomBuildBasePage::OnCustomBuildEnabledUI), NULL, this);
    m_buttonBrowseCustomBuildWD->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSCustomBuildBasePage::OnBrowseCustomBuildWD), NULL, this);
    m_buttonBrowseCustomBuildWD->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomBuildBasePage::OnCustomBuildEnabledUI), NULL, this);
    m_listCtrlTargets->Disconnect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(PSCustomBuildBasePage::OnItemActivated), NULL, this);
    m_listCtrlTargets->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(PSCustomBuildBasePage::OnItemSelected), NULL, this);
    m_listCtrlTargets->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomBuildBasePage::OnCustomBuildEnabledUI), NULL, this);
    m_buttonNewCustomTarget->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSCustomBuildBasePage::OnNewTarget), NULL, this);
    m_buttonNewCustomTarget->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomBuildBasePage::OnCustomBuildEnabledUI), NULL, this);
    m_buttonEditCustomTarget->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSCustomBuildBasePage::OnEditTarget), NULL, this);
    m_buttonEditCustomTarget->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomBuildBasePage::OnEditTargetUI), NULL, this);
    m_buttonDeleteCustomTarget->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PSCustomBuildBasePage::OnDeleteTarget), NULL, this);
    m_buttonDeleteCustomTarget->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomBuildBasePage::OnDeleteTargetUI), NULL, this);
    
}

GlobalSettingsBasePanel::GlobalSettingsBasePanel(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCA3F0InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer117 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer117);
    
    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer117->Add(m_notebook, 1, wxALL|wxEXPAND, 5);
    
    m_compilerPage = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_compilerPage, _("Compiler"), false);
    
    wxBoxSizer* compilerPageSizer = new wxBoxSizer(wxVERTICAL);
    m_compilerPage->SetSizer(compilerPageSizer);
    
    wxFlexGridSizer* fgSizer10 = new wxFlexGridSizer(0, 3, 0, 0);
    fgSizer10->SetFlexibleDirection( wxBOTH );
    fgSizer10->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    fgSizer10->AddGrowableCol(1);
    
    compilerPageSizer->Add(fgSizer10, 0, wxEXPAND, 5);
    
    m_staticText6 = new wxStaticText(m_compilerPage, wxID_ANY, _("C++ Compiler Options:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer10->Add(m_staticText6, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCompilerOptions = new wxTextCtrl(m_compilerPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer10->Add(m_textCompilerOptions, 0, wxALL|wxEXPAND, 5);
    
    m_buttonCompilerOptions = new wxButton(m_compilerPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), wxBU_EXACTFIT);
    
    fgSizer10->Add(m_buttonCompilerOptions, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    m_staticText46 = new wxStaticText(m_compilerPage, wxID_ANY, _("C Compiler Options:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer10->Add(m_staticText46, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrlCCompileOptions = new wxTextCtrl(m_compilerPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer10->Add(m_textCtrlCCompileOptions, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    m_buttonCCompileOptions = new wxButton(m_compilerPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), wxBU_EXACTFIT);
    
    fgSizer10->Add(m_buttonCCompileOptions, 0, 0, 5);
    
    m_staticText4 = new wxStaticText(m_compilerPage, wxID_ANY, _("Additional Search Path:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer10->Add(m_staticText4, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textAdditionalSearchPath = new wxTextCtrl(m_compilerPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer10->Add(m_textAdditionalSearchPath, 0, wxALL|wxEXPAND, 5);
    
    m_buttonAddSearchPath = new wxButton(m_compilerPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), wxBU_EXACTFIT);
    
    fgSizer10->Add(m_buttonAddSearchPath, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    m_staticText171 = new wxStaticText(m_compilerPage, wxID_ANY, _("Preprocessor:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer10->Add(m_staticText171, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textPreprocessor = new wxTextCtrl(m_compilerPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer10->Add(m_textPreprocessor, 0, wxALL|wxEXPAND, 5);
    
    m_buttonAddPreprocessor = new wxButton(m_compilerPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), wxBU_EXACTFIT);
    
    fgSizer10->Add(m_buttonAddPreprocessor, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    m_linkerPage = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_linkerPage, _("Linker"), false);
    
    wxBoxSizer* linkerPageSizer = new wxBoxSizer(wxVERTICAL);
    m_linkerPage->SetSizer(linkerPageSizer);
    
    wxFlexGridSizer* fgSizer11 = new wxFlexGridSizer(3, 3, 0, 0);
    fgSizer11->SetFlexibleDirection( wxBOTH );
    fgSizer11->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    fgSizer11->AddGrowableCol(1);
    
    linkerPageSizer->Add(fgSizer11, 0, wxEXPAND, 5);
    
    m_staticText10 = new wxStaticText(m_linkerPage, wxID_ANY, _("Options:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer11->Add(m_staticText10, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textLinkerOptions = new wxTextCtrl(m_linkerPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer11->Add(m_textLinkerOptions, 0, wxALL|wxEXPAND, 5);
    
    m_buttonLinkerOptions = new wxButton(m_linkerPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), wxBU_EXACTFIT);
    
    fgSizer11->Add(m_buttonLinkerOptions, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    m_staticText7 = new wxStaticText(m_linkerPage, wxID_ANY, _("Library Path:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer11->Add(m_staticText7, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textLibraryPath = new wxTextCtrl(m_linkerPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer11->Add(m_textLibraryPath, 0, wxALL|wxEXPAND, 5);
    
    m_buttonLibraryPath = new wxButton(m_linkerPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), wxBU_EXACTFIT);
    
    fgSizer11->Add(m_buttonLibraryPath, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    m_staticText8 = new wxStaticText(m_linkerPage, wxID_ANY, _("Libraries:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer11->Add(m_staticText8, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textLibraries = new wxTextCtrl(m_linkerPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_textLibraries->SetToolTip(_("Enter any extra library names, separated by';' e.g. Foo  or  Foo;Bar"));
    
    fgSizer11->Add(m_textLibraries, 0, wxALL|wxEXPAND, 5);
    
    m_buttonLibraries = new wxButton(m_linkerPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), wxBU_EXACTFIT);
    
    fgSizer11->Add(m_buttonLibraries, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    m_resourceCmpPage = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_resourceCmpPage, _("Resources"), false);
    
    wxBoxSizer* bSizer151 = new wxBoxSizer(wxVERTICAL);
    m_resourceCmpPage->SetSizer(bSizer151);
    
    wxFlexGridSizer* fgSizer4 = new wxFlexGridSizer(2, 3, 0, 0);
    fgSizer4->SetFlexibleDirection( wxBOTH );
    fgSizer4->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    fgSizer4->AddGrowableCol(1);
    
    bSizer151->Add(fgSizer4, 1, wxEXPAND, 5);
    
    m_staticText221 = new wxStaticText(m_resourceCmpPage, wxID_ANY, _("Compiler Options:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer4->Add(m_staticText221, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textAddResCmpOptions = new wxTextCtrl(m_resourceCmpPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer4->Add(m_textAddResCmpOptions, 0, wxALL|wxEXPAND, 5);
    
    m_buttonAddResCmpOptions = new wxButton(m_resourceCmpPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), wxBU_EXACTFIT);
    
    fgSizer4->Add(m_buttonAddResCmpOptions, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    m_staticText23 = new wxStaticText(m_resourceCmpPage, wxID_ANY, _("Additional Search Path:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer4->Add(m_staticText23, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textAddResCmpPath = new wxTextCtrl(m_resourceCmpPage, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer4->Add(m_textAddResCmpPath, 0, wxALL|wxEXPAND, 5);
    
    m_buttonAddResCmpPath = new wxButton(m_resourceCmpPage, wxID_ANY, _("..."), wxDefaultPosition, wxSize(-1, -1), wxBU_EXACTFIT);
    
    fgSizer4->Add(m_buttonAddResCmpPath, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    m_textCompilerOptions->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(GlobalSettingsBasePanel::OnCmdEvtVModified), NULL, this);
    m_buttonCompilerOptions->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GlobalSettingsBasePanel::OnButtonAddCompilerOptions), NULL, this);
    m_textCtrlCCompileOptions->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(GlobalSettingsBasePanel::OnCmdEvtVModified), NULL, this);
    m_buttonCCompileOptions->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GlobalSettingsBasePanel::OnButtonAddCCompilerOptions), NULL, this);
    m_textAdditionalSearchPath->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(GlobalSettingsBasePanel::OnCmdEvtVModified), NULL, this);
    m_buttonAddSearchPath->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GlobalSettingsBasePanel::OnAddSearchPath), NULL, this);
    m_textPreprocessor->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(GlobalSettingsBasePanel::OnCmdEvtVModified), NULL, this);
    m_buttonAddPreprocessor->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GlobalSettingsBasePanel::OnButtonAddPreprocessor), NULL, this);
    m_textLinkerOptions->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(GlobalSettingsBasePanel::OnCmdEvtVModified), NULL, this);
    m_buttonLinkerOptions->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GlobalSettingsBasePanel::OnButtonAddLinkerOptions), NULL, this);
    m_textLibraryPath->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(GlobalSettingsBasePanel::OnCmdEvtVModified), NULL, this);
    m_buttonLibraryPath->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GlobalSettingsBasePanel::OnAddLibraryPath), NULL, this);
    m_textLibraries->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(GlobalSettingsBasePanel::OnCmdEvtVModified), NULL, this);
    m_buttonLibraries->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GlobalSettingsBasePanel::OnAddLibrary), NULL, this);
    m_textAddResCmpOptions->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(GlobalSettingsBasePanel::OnCmdEvtVModified), NULL, this);
    m_buttonAddResCmpOptions->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GlobalSettingsBasePanel::OnResourceCmpAddOption), NULL, this);
    m_textAddResCmpPath->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(GlobalSettingsBasePanel::OnCmdEvtVModified), NULL, this);
    m_buttonAddResCmpPath->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GlobalSettingsBasePanel::OnResourceCmpAddPath), NULL, this);
    
}

GlobalSettingsBasePanel::~GlobalSettingsBasePanel()
{
    m_textCompilerOptions->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(GlobalSettingsBasePanel::OnCmdEvtVModified), NULL, this);
    m_buttonCompilerOptions->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GlobalSettingsBasePanel::OnButtonAddCompilerOptions), NULL, this);
    m_textCtrlCCompileOptions->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(GlobalSettingsBasePanel::OnCmdEvtVModified), NULL, this);
    m_buttonCCompileOptions->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GlobalSettingsBasePanel::OnButtonAddCCompilerOptions), NULL, this);
    m_textAdditionalSearchPath->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(GlobalSettingsBasePanel::OnCmdEvtVModified), NULL, this);
    m_buttonAddSearchPath->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GlobalSettingsBasePanel::OnAddSearchPath), NULL, this);
    m_textPreprocessor->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(GlobalSettingsBasePanel::OnCmdEvtVModified), NULL, this);
    m_buttonAddPreprocessor->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GlobalSettingsBasePanel::OnButtonAddPreprocessor), NULL, this);
    m_textLinkerOptions->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(GlobalSettingsBasePanel::OnCmdEvtVModified), NULL, this);
    m_buttonLinkerOptions->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GlobalSettingsBasePanel::OnButtonAddLinkerOptions), NULL, this);
    m_textLibraryPath->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(GlobalSettingsBasePanel::OnCmdEvtVModified), NULL, this);
    m_buttonLibraryPath->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GlobalSettingsBasePanel::OnAddLibraryPath), NULL, this);
    m_textLibraries->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(GlobalSettingsBasePanel::OnCmdEvtVModified), NULL, this);
    m_buttonLibraries->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GlobalSettingsBasePanel::OnAddLibrary), NULL, this);
    m_textAddResCmpOptions->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(GlobalSettingsBasePanel::OnCmdEvtVModified), NULL, this);
    m_buttonAddResCmpOptions->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GlobalSettingsBasePanel::OnResourceCmpAddOption), NULL, this);
    m_textAddResCmpPath->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(GlobalSettingsBasePanel::OnCmdEvtVModified), NULL, this);
    m_buttonAddResCmpPath->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GlobalSettingsBasePanel::OnResourceCmpAddPath), NULL, this);
    
}

PSCustomMakefileBasePage::PSCustomMakefileBasePage(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCA3F0InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer43 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer43);
    
    m_customMakefileStep = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    
    bSizer43->Add(m_customMakefileStep, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* bSizer16 = new wxBoxSizer(wxVERTICAL);
    m_customMakefileStep->SetSizer(bSizer16);
    
    wxFlexGridSizer* fgSizer5 = new wxFlexGridSizer(2, 2, 0, 0);
    fgSizer5->SetFlexibleDirection( wxBOTH );
    fgSizer5->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    fgSizer5->AddGrowableCol(1);
    fgSizer5->AddGrowableRow(1);
    
    bSizer16->Add(fgSizer5, 1, wxEXPAND, 5);
    
    m_staticText25 = new wxStaticText(m_customMakefileStep, wxID_ANY, _("Dependencies:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer5->Add(m_staticText25, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textDeps = new wxTextCtrl(m_customMakefileStep, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_NO_VSCROLL);
    #ifdef __WXMSW__
    // To get the newer version of the font on MSW, we use font wxSYS_DEFAULT_GUI_FONT with family set to wxFONTFAMILY_TELETYPE
    wxFont m_textDepsFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_textDepsFont.SetFamily(wxFONTFAMILY_TELETYPE);
    #else
    wxFont m_textDepsFont = wxSystemSettings::GetFont(wxSYS_ANSI_FIXED_FONT);
    m_textDepsFont.SetFamily(wxFONTFAMILY_TELETYPE);
    #endif
    m_textDeps->SetFont(m_textDepsFont);
    
    fgSizer5->Add(m_textDeps, 0, wxALL|wxEXPAND, 5);
    
    m_staticText26 = new wxStaticText(m_customMakefileStep, wxID_ANY, _("Rule action:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer5->Add(m_staticText26, 0, wxALL|wxALIGN_RIGHT, 5);
    
    m_textPreBuildRule = new wxTextCtrl(m_customMakefileStep, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_RICH2|wxTE_PROCESS_TAB|wxTE_PROCESS_ENTER|wxTE_MULTILINE|wxTE_DONTWRAP);
    #ifdef __WXMSW__
    // To get the newer version of the font on MSW, we use font wxSYS_DEFAULT_GUI_FONT with family set to wxFONTFAMILY_TELETYPE
    wxFont m_textPreBuildRuleFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_textPreBuildRuleFont.SetFamily(wxFONTFAMILY_TELETYPE);
    #else
    wxFont m_textPreBuildRuleFont = wxSystemSettings::GetFont(wxSYS_ANSI_FIXED_FONT);
    m_textPreBuildRuleFont.SetFamily(wxFONTFAMILY_TELETYPE);
    #endif
    m_textPreBuildRule->SetFont(m_textPreBuildRuleFont);
    
    fgSizer5->Add(m_textPreBuildRule, 0, wxALL|wxEXPAND, 5);
    
    wxStaticBoxSizer* sbSizer2 = new wxStaticBoxSizer( new wxStaticBox(m_customMakefileStep, wxID_ANY, wxT("")), wxVERTICAL);
    
    bSizer16->Add(sbSizer2, 0, wxEXPAND, 5);
    
    m_staticText24 = new wxStaticText(m_customMakefileStep, wxID_ANY, _("Define here a custom makefile rule to be executed in the pre-build steps.\nSee the wiki for more help"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    sbSizer2->Add(m_staticText24, 0, wxALL, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    this->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomMakefileBasePage::OnProjectEnabledUI), NULL, this);
    m_staticText25->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomMakefileBasePage::OnProjectCustumBuildUI), NULL, this);
    m_textDeps->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCustomMakefileBasePage::OnCmdEvtVModified), NULL, this);
    m_textDeps->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomMakefileBasePage::OnProjectCustumBuildUI), NULL, this);
    m_staticText26->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomMakefileBasePage::OnProjectCustumBuildUI), NULL, this);
    m_textPreBuildRule->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCustomMakefileBasePage::OnCmdEvtVModified), NULL, this);
    m_textPreBuildRule->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomMakefileBasePage::OnProjectCustumBuildUI), NULL, this);
    m_staticText24->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomMakefileBasePage::OnProjectCustumBuildUI), NULL, this);
    
}

PSCustomMakefileBasePage::~PSCustomMakefileBasePage()
{
    this->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomMakefileBasePage::OnProjectEnabledUI), NULL, this);
    m_staticText25->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomMakefileBasePage::OnProjectCustumBuildUI), NULL, this);
    m_textDeps->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCustomMakefileBasePage::OnCmdEvtVModified), NULL, this);
    m_textDeps->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomMakefileBasePage::OnProjectCustumBuildUI), NULL, this);
    m_staticText26->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomMakefileBasePage::OnProjectCustumBuildUI), NULL, this);
    m_textPreBuildRule->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCustomMakefileBasePage::OnCmdEvtVModified), NULL, this);
    m_textPreBuildRule->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomMakefileBasePage::OnProjectCustumBuildUI), NULL, this);
    m_staticText24->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCustomMakefileBasePage::OnProjectCustumBuildUI), NULL, this);
    
}

PSCompletionBase::PSCompletionBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCA3F0InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer34 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer34);
    
    m_splitter1 = new wxSplitterWindow(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxSP_LIVE_UPDATE|wxSP_NO_XP_THEME|wxSP_3DSASH);
    m_splitter1->SetSashGravity(0.5);
    m_splitter1->SetMinimumPaneSize(20);
    
    bSizer34->Add(m_splitter1, 1, wxEXPAND, 5);
    
    m_panel14 = new wxPanel(m_splitter1, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    
    wxBoxSizer* bSizer35 = new wxBoxSizer(wxVERTICAL);
    m_panel14->SetSizer(bSizer35);
    
    m_staticText47 = new wxStaticText(m_panel14, wxID_ANY, _("Search paths:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer35->Add(m_staticText47, 0, wxALL, 5);
    
    m_textCtrlSearchPaths = new wxTextCtrl(m_panel14, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_RICH2|wxTE_PROCESS_ENTER|wxTE_MULTILINE);
    #ifdef __WXMSW__
    // To get the newer version of the font on MSW, we use font wxSYS_DEFAULT_GUI_FONT with family set to wxFONTFAMILY_TELETYPE
    wxFont m_textCtrlSearchPathsFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_textCtrlSearchPathsFont.SetFamily(wxFONTFAMILY_TELETYPE);
    #else
    wxFont m_textCtrlSearchPathsFont = wxSystemSettings::GetFont(wxSYS_ANSI_FIXED_FONT);
    m_textCtrlSearchPathsFont.SetFamily(wxFONTFAMILY_TELETYPE);
    #endif
    m_textCtrlSearchPaths->SetFont(m_textCtrlSearchPathsFont);
    
    bSizer35->Add(m_textCtrlSearchPaths, 1, wxALL|wxEXPAND, 5);
    
    m_panel15 = new wxPanel(m_splitter1, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    m_splitter1->SplitHorizontally(m_panel14, m_panel15, 0);
    
    wxBoxSizer* bSizer36 = new wxBoxSizer(wxVERTICAL);
    m_panel15->SetSizer(bSizer36);
    
    m_staticText49 = new wxStaticText(m_panel15, wxID_ANY, _("Macros (clang only):"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer36->Add(m_staticText49, 0, wxALL, 5);
    
    m_textCtrlMacros = new wxTextCtrl(m_panel15, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_RICH2|wxTE_MULTILINE);
    #ifdef __WXMSW__
    // To get the newer version of the font on MSW, we use font wxSYS_DEFAULT_GUI_FONT with family set to wxFONTFAMILY_TELETYPE
    wxFont m_textCtrlMacrosFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_textCtrlMacrosFont.SetFamily(wxFONTFAMILY_TELETYPE);
    #else
    wxFont m_textCtrlMacrosFont = wxSystemSettings::GetFont(wxSYS_ANSI_FIXED_FONT);
    m_textCtrlMacrosFont.SetFamily(wxFONTFAMILY_TELETYPE);
    #endif
    m_textCtrlMacros->SetFont(m_textCtrlMacrosFont);
    
    bSizer36->Add(m_textCtrlMacros, 1, wxLEFT|wxRIGHT|wxEXPAND, 5);
    
    wxBoxSizer* bSizer40 = new wxBoxSizer(wxVERTICAL);
    
    bSizer36->Add(bSizer40, 0, wxEXPAND, 5);
    
    m_checkBoxC11 = new wxCheckBox(m_panel15, wxID_ANY, _("Enable C++11 Standard"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxC11->SetValue(false);
    
    bSizer40->Add(m_checkBoxC11, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    this->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompletionBase::OnProjectEnabledUI), NULL, this);
    m_textCtrlSearchPaths->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCompletionBase::OnCmdEvtVModified), NULL, this);
    m_textCtrlMacros->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCompletionBase::OnCmdEvtVModified), NULL, this);
    m_checkBoxC11->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSCompletionBase::OnCmdEvtVModified), NULL, this);
    
}

PSCompletionBase::~PSCompletionBase()
{
    this->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(PSCompletionBase::OnProjectEnabledUI), NULL, this);
    m_textCtrlSearchPaths->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCompletionBase::OnCmdEvtVModified), NULL, this);
    m_textCtrlMacros->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PSCompletionBase::OnCmdEvtVModified), NULL, this);
    m_checkBoxC11->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PSCompletionBase::OnCmdEvtVModified), NULL, this);
    
}

ProjectCustomBuildTragetDlgBase::ProjectCustomBuildTragetDlgBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCA3F0InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer45 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer45);
    
    wxFlexGridSizer* flexGridSizer53 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer53->SetFlexibleDirection( wxBOTH );
    flexGridSizer53->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer53->AddGrowableCol(1);
    flexGridSizer53->AddGrowableRow(1);
    
    boxSizer45->Add(flexGridSizer53, 1, wxALL|wxEXPAND, 5);
    
    m_staticTextTargetName = new wxStaticText(this, wxID_ANY, _("Target Name:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer53->Add(m_staticTextTargetName, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrlTargetName = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer53->Add(m_textCtrlTargetName, 1, wxALL|wxEXPAND, 5);
    
    m_staticTextCommand = new wxStaticText(this, wxID_ANY, _("Command:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer53->Add(m_staticTextCommand, 0, wxALL|wxALIGN_RIGHT|wxALIGN_TOP, 5);
    
    m_textCtrlCommand = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), wxTE_WORDWRAP|wxTE_RICH2|wxTE_MULTILINE);
    m_textCtrlCommand->SetFocus();
    
    flexGridSizer53->Add(m_textCtrlCommand, 0, wxALL|wxEXPAND, 5);
    
    m_stdBtnSizer120 = new wxStdDialogButtonSizer();
    
    boxSizer45->Add(m_stdBtnSizer120, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    m_button122 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_button122->SetDefault();
    m_stdBtnSizer120->AddButton(m_button122);
    
    m_button124 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_stdBtnSizer120->AddButton(m_button124);
    m_stdBtnSizer120->Realize();
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    m_textCtrlTargetName->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(ProjectCustomBuildTragetDlgBase::OnEditTargetNameUI), NULL, this);
    
}

ProjectCustomBuildTragetDlgBase::~ProjectCustomBuildTragetDlgBase()
{
    m_textCtrlTargetName->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(ProjectCustomBuildTragetDlgBase::OnEditTargetNameUI), NULL, this);
    
}
