//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: editor_options_guides.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "editoroptionsgeneralguidespanelbase.h"

// Declare the bitmap loading function
extern void wxC77E7InitBitmapResources();

static bool bBitmapLoaded = false;

EditorOptionsGeneralGuidesPanelBase::EditorOptionsGeneralGuidesPanelBase(wxWindow* parent, wxWindowID id,
                                                                         const wxPoint& pos, const wxSize& size,
                                                                         long style)
    : wxPanel(parent, id, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC77E7InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* bSizer1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer1);

    wxGridBagSizer* gridBagSizer128 = new wxGridBagSizer(0, 0);

    bSizer1->Add(gridBagSizer128, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxStaticBoxSizer* staticBoxSizer73 =
        new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, _("Line Numbers")), wxVERTICAL);

    gridBagSizer128->Add(staticBoxSizer73, wxGBPosition(0, 0), wxGBSpan(1, 1), wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_checkBoxLineNumbersShow = new wxCheckBox(this, wxID_ANY, _("Display line numbers"), wxDefaultPosition,
                                               wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_checkBoxLineNumbersShow->SetValue(true);

    staticBoxSizer73->Add(m_checkBoxLineNumbersShow, 0, wxALL, WXC_FROM_DIP(5));

    m_checkBoxLineNumbersHighlightCurrent = new wxCheckBox(this, wxID_ANY, _("Highlight current line number"),
                                                           wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_checkBoxLineNumbersHighlightCurrent->SetValue(true);

    staticBoxSizer73->Add(m_checkBoxLineNumbersHighlightCurrent, 0, wxALL, WXC_FROM_DIP(5));

    m_checkBoxLineNumbersRelative = new wxCheckBox(this, wxID_ANY, _("Use relative line numbers"), wxDefaultPosition,
                                                   wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_checkBoxLineNumbersRelative->SetValue(false);

    staticBoxSizer73->Add(m_checkBoxLineNumbersRelative, 0, wxALL, WXC_FROM_DIP(5));

    wxStaticBoxSizer* staticBoxSizer77 =
        new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, _("Highlight")), wxVERTICAL);

    gridBagSizer128->Add(staticBoxSizer77, wxGBPosition(0, 1), wxGBSpan(1, 1), wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_checkBoxHighlightIndentLines =
        new wxCheckBox(this, wxID_ANY, _("Indentation Lines"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_checkBoxHighlightIndentLines->SetValue(true);

    staticBoxSizer77->Add(m_checkBoxHighlightIndentLines, 0, wxALL, WXC_FROM_DIP(5));

    m_checkBoxHighlightModifiedLines =
        new wxCheckBox(this, wxID_ANY, _("Modified lines"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_checkBoxHighlightModifiedLines->SetValue(false);

    staticBoxSizer77->Add(m_checkBoxHighlightModifiedLines, 0, wxALL, WXC_FROM_DIP(5));

    m_checkBoxHighlightBraces =
        new wxCheckBox(this, wxID_ANY, _("Matching braces"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_checkBoxHighlightBraces->SetValue(true);

    staticBoxSizer77->Add(m_checkBoxHighlightBraces, 0, wxALL, WXC_FROM_DIP(5));

    wxStaticBoxSizer* staticBoxSizer89 =
        new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, _("Highlight Caret Line")), wxVERTICAL);

    gridBagSizer128->Add(staticBoxSizer89, wxGBPosition(1, 0), wxGBSpan(1, 1), wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxFlexGridSizer* flexGridSizer91 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer91->SetFlexibleDirection(wxBOTH);
    flexGridSizer91->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer91->AddGrowableCol(1);

    staticBoxSizer89->Add(flexGridSizer91, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_checkBoxCaretLineEnabeldHighlight =
        new wxCheckBox(this, wxID_ANY, _("Enabled"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_checkBoxCaretLineEnabeldHighlight->SetValue(false);

    flexGridSizer91->Add(m_checkBoxCaretLineEnabeldHighlight, 0, wxALL, WXC_FROM_DIP(5));

    flexGridSizer91->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));

    m_staticText95 =
        new wxStaticText(this, wxID_ANY, _("Colour:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    flexGridSizer91->Add(m_staticText95, 0, wxALL | wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_colourPickerCaretLineColour =
        new wxColourPickerCtrl(this, wxID_ANY, wxColour(wxT("rgb(120,188,188)")), wxDefaultPosition,
                               wxDLG_UNIT(this, wxSize(-1, -1)), wxCLRP_DEFAULT_STYLE);

    flexGridSizer91->Add(m_colourPickerCaretLineColour, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_staticText97 =
        new wxStaticText(this, wxID_ANY, _("Alpha:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    flexGridSizer91->Add(m_staticText97, 0, wxALL | wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_spinCtrlCaretLineAlpha =
        new wxSpinCtrl(this, wxID_ANY, wxT("30"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxSP_ARROW_KEYS);
    m_spinCtrlCaretLineAlpha->SetRange(0, 255);
    m_spinCtrlCaretLineAlpha->SetValue(30);

    flexGridSizer91->Add(m_spinCtrlCaretLineAlpha, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxStaticBoxSizer* staticBoxSizer90 =
        new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, _("Highlight Debugger Line")), wxVERTICAL);

    gridBagSizer128->Add(staticBoxSizer90, wxGBPosition(1, 1), wxGBSpan(1, 1), wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxFlexGridSizer* flexGridSizer92 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer92->SetFlexibleDirection(wxBOTH);
    flexGridSizer92->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer92->AddGrowableCol(1);

    staticBoxSizer90->Add(flexGridSizer92, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_checkBoxDebuggerLineEnabled =
        new wxCheckBox(this, wxID_ANY, _("Enabled"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_checkBoxDebuggerLineEnabled->SetValue(false);

    flexGridSizer92->Add(m_checkBoxDebuggerLineEnabled, 0, wxALL, WXC_FROM_DIP(5));

    flexGridSizer92->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));

    m_staticText102 =
        new wxStaticText(this, wxID_ANY, _("Colour:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    flexGridSizer92->Add(m_staticText102, 0, wxALL | wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_colourPickerDebuggerLineColour =
        new wxColourPickerCtrl(this, wxID_ANY, wxColour(wxT("rgb(128,255,128)")), wxDefaultPosition,
                               wxDLG_UNIT(this, wxSize(-1, -1)), wxCLRP_DEFAULT_STYLE);

    flexGridSizer92->Add(m_colourPickerDebuggerLineColour, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxStaticBoxSizer* staticBoxSizer81 =
        new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, _("Whitespaces")), wxVERTICAL);

    gridBagSizer128->Add(staticBoxSizer81, wxGBPosition(2, 0), wxGBSpan(1, 2), wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxFlexGridSizer* flexGridSizer82 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer82->SetFlexibleDirection(wxBOTH);
    flexGridSizer82->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer82->AddGrowableCol(1);

    staticBoxSizer81->Add(flexGridSizer82, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_staticText83 =
        new wxStaticText(this, wxID_ANY, _("Visibility:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    flexGridSizer82->Add(m_staticText83, 0, wxALL | wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxArrayString m_choiceWhitespaceVisibilityArr;
    m_choiceWhitespaceVisibilityArr.Add(_("Invisible"));
    m_choiceWhitespaceVisibilityArr.Add(_("Visible always"));
    m_choiceWhitespaceVisibilityArr.Add(_("Visible after indentation"));
    m_choiceWhitespaceVisibility = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)),
                                                m_choiceWhitespaceVisibilityArr, 0);
    m_choiceWhitespaceVisibility->SetSelection(0);

    flexGridSizer82->Add(m_choiceWhitespaceVisibility, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_staticText85 =
        new wxStaticText(this, wxID_ANY, _("EOL Mode:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    flexGridSizer82->Add(m_staticText85, 0, wxALL | wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxArrayString m_choiceWhitespaceEOLModeArr;
    m_choiceWhitespaceEOLModeArr.Add(_("Default"));
    m_choiceWhitespaceEOLModeArr.Add(_("Mac (CR)"));
    m_choiceWhitespaceEOLModeArr.Add(_("Windows (CRLF)"));
    m_choiceWhitespaceEOLModeArr.Add(_("Unix (LF)"));
    m_choiceWhitespaceEOLMode = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)),
                                             m_choiceWhitespaceEOLModeArr, 0);
    m_choiceWhitespaceEOLMode->SetSelection(0);

    flexGridSizer82->Add(m_choiceWhitespaceEOLMode, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_staticText87 =
        new wxStaticText(this, wxID_ANY, _("Line spacing:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    flexGridSizer82->Add(m_staticText87, 0, wxALL | wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_spinCtrlWhitespaceLineSpacing =
        new wxSpinCtrl(this, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxSP_ARROW_KEYS);
    m_spinCtrlWhitespaceLineSpacing->SetRange(-10, 10);
    m_spinCtrlWhitespaceLineSpacing->SetValue(0);

    flexGridSizer82->Add(m_spinCtrlWhitespaceLineSpacing, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));
    gridBagSizer128->AddGrowableCol(0);
    gridBagSizer128->AddGrowableCol(1);

    SetName(wxT("EditorOptionsGeneralGuidesPanelBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) {
        GetSizer()->Fit(this);
    }
    // Connect events
    m_checkBoxLineNumbersHighlightCurrent->Bind(wxEVT_UPDATE_UI,
                                                &EditorOptionsGeneralGuidesPanelBase::OnDisplayLineNumbersUI, this);
    m_checkBoxLineNumbersRelative->Bind(wxEVT_UPDATE_UI,
                                        &EditorOptionsGeneralGuidesPanelBase::OnUseRelativeLineNumbersUI, this);
    m_staticText95->Bind(wxEVT_UPDATE_UI, &EditorOptionsGeneralGuidesPanelBase::OnHighlightCaretLineUI, this);
    m_colourPickerCaretLineColour->Bind(wxEVT_UPDATE_UI, &EditorOptionsGeneralGuidesPanelBase::OnHighlightCaretLineUI,
                                        this);
    m_staticText97->Bind(wxEVT_UPDATE_UI, &EditorOptionsGeneralGuidesPanelBase::OnHighlightCaretLineUI, this);
    m_spinCtrlCaretLineAlpha->Bind(wxEVT_UPDATE_UI, &EditorOptionsGeneralGuidesPanelBase::OnHighlightCaretLineUI, this);
    m_staticText102->Bind(wxEVT_UPDATE_UI, &EditorOptionsGeneralGuidesPanelBase::OnHighlightDebuggerLineUI, this);
    m_colourPickerDebuggerLineColour->Bind(wxEVT_UPDATE_UI,
                                           &EditorOptionsGeneralGuidesPanelBase::OnHighlightDebuggerLineUI, this);
}

EditorOptionsGeneralGuidesPanelBase::~EditorOptionsGeneralGuidesPanelBase()
{
    m_checkBoxLineNumbersHighlightCurrent->Unbind(wxEVT_UPDATE_UI,
                                                  &EditorOptionsGeneralGuidesPanelBase::OnDisplayLineNumbersUI, this);
    m_checkBoxLineNumbersRelative->Unbind(wxEVT_UPDATE_UI,
                                          &EditorOptionsGeneralGuidesPanelBase::OnUseRelativeLineNumbersUI, this);
    m_staticText95->Unbind(wxEVT_UPDATE_UI, &EditorOptionsGeneralGuidesPanelBase::OnHighlightCaretLineUI, this);
    m_colourPickerCaretLineColour->Unbind(wxEVT_UPDATE_UI, &EditorOptionsGeneralGuidesPanelBase::OnHighlightCaretLineUI,
                                          this);
    m_staticText97->Unbind(wxEVT_UPDATE_UI, &EditorOptionsGeneralGuidesPanelBase::OnHighlightCaretLineUI, this);
    m_spinCtrlCaretLineAlpha->Unbind(wxEVT_UPDATE_UI, &EditorOptionsGeneralGuidesPanelBase::OnHighlightCaretLineUI,
                                     this);
    m_staticText102->Unbind(wxEVT_UPDATE_UI, &EditorOptionsGeneralGuidesPanelBase::OnHighlightDebuggerLineUI, this);
    m_colourPickerDebuggerLineColour->Unbind(wxEVT_UPDATE_UI,
                                             &EditorOptionsGeneralGuidesPanelBase::OnHighlightDebuggerLineUI, this);
}

EditorOptionsGeneralEditBase::EditorOptionsGeneralEditBase(wxWindow* parent, wxWindowID id, const wxPoint& pos,
                                                           const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC77E7InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizer4 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer4);

    wxStaticBoxSizer* staticBoxSizer104 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, _("Edit")), wxVERTICAL);

    boxSizer4->Add(staticBoxSizer104, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizer105 = new wxBoxSizer(wxVERTICAL);

    staticBoxSizer104->Add(boxSizer105, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_checkBoxEditSmartCurlyBrackets = new wxCheckBox(this, wxID_ANY, _("Smart curly brackets"), wxDefaultPosition,
                                                      wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_checkBoxEditSmartCurlyBrackets->SetValue(true);
    m_checkBoxEditSmartCurlyBrackets->SetToolTip(_("When user types '{', automatically insert the closing brace"));

    boxSizer105->Add(m_checkBoxEditSmartCurlyBrackets, 0, wxALL, WXC_FROM_DIP(5));

    m_checkBoxEditSmartParenthesis = new wxCheckBox(this, wxID_ANY, _("Smart square brackets and parentheses"),
                                                    wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_checkBoxEditSmartParenthesis->SetValue(false);
    m_checkBoxEditSmartParenthesis->SetToolTip(
        _("When typing ']' or ')' next to a ']' or ')'\nMove the caret one position to the right\n"));

    boxSizer105->Add(m_checkBoxEditSmartParenthesis, 0, wxALL, WXC_FROM_DIP(5));

    m_checkBoxAutoCompleteParen = new wxCheckBox(this, wxID_ANY, _("Auto complete closing bracket and parentheses"),
                                                 wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_checkBoxAutoCompleteParen->SetValue(true);
    m_checkBoxAutoCompleteParen->SetToolTip(_("Auto complete closing bracket and parentheses"));

    boxSizer105->Add(m_checkBoxAutoCompleteParen, 0, wxALL, WXC_FROM_DIP(5));

    m_checkBoxSmartQuotes =
        new wxCheckBox(this, wxID_ANY, _("Smart quotes"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_checkBoxSmartQuotes->SetValue(true);
    m_checkBoxSmartQuotes->SetToolTip(
        _("When typing \" or ', automatically add another one to the right, unless one already exists (in this case, "
          "simply move the caret one position to the right)"));

    boxSizer105->Add(m_checkBoxSmartQuotes, 0, wxALL, WXC_FROM_DIP(5));

    m_checkBoxCopyEntireLine = new wxCheckBox(this, wxID_ANY, _("Copying empty selection copies caret line"),
                                              wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_checkBoxCopyEntireLine->SetValue(true);
    m_checkBoxCopyEntireLine->SetToolTip(_("Whether copying an empty selection to the clipboard copies the entire "
                                           "contents of the caret line, or nothing"));

    boxSizer105->Add(m_checkBoxCopyEntireLine, 0, wxALL, WXC_FROM_DIP(5));

    m_checkBoxDisableSemicolonShift = new wxCheckBox(this, wxID_ANY, _("Disable semicolon shift"), wxDefaultPosition,
                                                     wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_checkBoxDisableSemicolonShift->SetValue(false);
    m_checkBoxDisableSemicolonShift->SetToolTip(
        _("Typing a semicolon next to a closing parenthesis\nplaces it to the right of the closing parenthesis"));

    boxSizer105->Add(m_checkBoxDisableSemicolonShift, 0, wxALL, WXC_FROM_DIP(5));

    wxStaticBoxSizer* staticBoxSizer112 =
        new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, _("Typing in Selection")), wxVERTICAL);

    boxSizer4->Add(staticBoxSizer112, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizer113 = new wxBoxSizer(wxVERTICAL);

    staticBoxSizer112->Add(boxSizer113, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_checkBoxWrapWithQuotes =
        new wxCheckBox(this, wxID_ANY, _("Wrap with quotes"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_checkBoxWrapWithQuotes->SetValue(false);
    m_checkBoxWrapWithQuotes->SetToolTip(_("When typing ' or \" on a selection, instead of replacing the selection "
                                           "with the character, wrap it with quotes"));

    boxSizer113->Add(m_checkBoxWrapWithQuotes, 0, wxALL, WXC_FROM_DIP(5));

    m_checkBoxWrapWithBrackets =
        new wxCheckBox(this, wxID_ANY, _("Wrap with brackets"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_checkBoxWrapWithBrackets->SetValue(false);
    m_checkBoxWrapWithBrackets->SetToolTip(_("When typing '(' or '[' on a selection, instead of replacing the "
                                             "selection with the character, wrap it with brackets"));

    boxSizer113->Add(m_checkBoxWrapWithBrackets, 0, wxALL, WXC_FROM_DIP(5));

    wxStaticBoxSizer* staticBoxSizer116 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, _("Other")), wxVERTICAL);

    boxSizer4->Add(staticBoxSizer116, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizer117 = new wxBoxSizer(wxVERTICAL);

    staticBoxSizer116->Add(boxSizer117, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_checkBoxEnableMouseZoom = new wxCheckBox(this, wxID_ANY, _("Enable zoom with mouse scroll"), wxDefaultPosition,
                                               wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_checkBoxEnableMouseZoom->SetValue(true);

    boxSizer117->Add(m_checkBoxEnableMouseZoom, 0, wxALL, WXC_FROM_DIP(5));

    m_checkBoxIdentLineComments = new wxCheckBox(this, wxID_ANY, _("Indent line comments"), wxDefaultPosition,
                                                 wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_checkBoxIdentLineComments->SetValue(false);

    boxSizer117->Add(m_checkBoxIdentLineComments, 0, wxALL, WXC_FROM_DIP(5));

    SetName(wxT("EditorOptionsGeneralEditBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) {
        GetSizer()->Fit(this);
    }
}

EditorOptionsGeneralEditBase::~EditorOptionsGeneralEditBase() {}
