From 5f2362f21d070b337a2c75d20b40e32c3b8dc233 Mon Sep 17 00:00:00 2001
From: James Cowgill <james410@cowgill.org.uk>
Date: Thu, 14 May 2015 23:51:43 +0100
Subject: [PATCH 4/5] Fix LLDBDebugger undefined symbol error when using
 LD_BIND_NOW

LLDBDebugger uses symbols from liblldb.so so it should link against it. If
codelite is compiled with -Wl,as-needed and is then run with LD_BIND_NOW set,
then I get errors like this:

> Failed to load plugin's dll: /usr/lib/codelite/LLDBDebugger.so
> /usr/lib/codelite/LLDBDebugger.so: undefined symbol: _ZN4lldb7SBValueD1Ev

The link_directories line is removed as it's duplicated from above.
${LIBLLDB} is moved to be with the rest of the libraries to make things neater.
---
 LLDBDebugger/CMakeLists.txt | 6 ++----
 1 file changed, 2 insertions(+), 4 deletions(-)

diff --git a/LLDBDebugger/CMakeLists.txt b/LLDBDebugger/CMakeLists.txt
index 4f283e9..063a450 100644
--- a/LLDBDebugger/CMakeLists.txt
+++ b/LLDBDebugger/CMakeLists.txt
@@ -78,15 +78,13 @@ if (WITH_LLDB MATCHES 1)
         add_library(${PLUGIN_NAME} SHARED ${PLUGIN_SRCS})
 
         target_link_libraries(LLDBDebugger LLDBProtocol)
-if (APPLE)
-        link_directories(${LLDB_LIB_PATH})
-        target_link_libraries(${PLUGIN_NAME} ${LIBLLDB})
-endif()
+
         # Codelite plugins doesn't use the "lib" prefix.
         set_target_properties(${PLUGIN_NAME} PROPERTIES PREFIX "")
         target_link_libraries(${PLUGIN_NAME}
                               ${LINKER_OPTIONS}
                               ${wxWidgets_LIBRARIES}
+                              ${LIBLLDB}
                               libcodelite
                               plugin
                               )
-- 
2.1.4

