Author: Chow Loong Jin <hyperair@ubuntu.com>
Description: Fallback on "x-terminal-emulator" if all other terminal
 emulators cannot be found.
---
 CodeLite/procutils.cpp   |    4 -
 LiteEditor/manager.cpp   |    4 -
 Plugin/consolefinder.cpp |    6 +
 Plugin/macros.h          |  162 +++++++++++++++++++++++------------------------
 4 files changed, 90 insertions(+), 86 deletions(-)

--- codelite.orig/CodeLite/procutils.cpp
+++ codelite/CodeLite/procutils.cpp
@@ -419,7 +419,9 @@ bool ProcUtils::Shell()
 	//try to locate the default terminal
 	wxString terminal;
 	wxString where;
-	if (Locate(wxT("gnome-terminal"), where)) {
+	if (Locate(wxT("x-terminal-emulator"), where)) {
+		terminal = where;
+	} else if (Locate(wxT("gnome-terminal"), where)) {
 		terminal = where;
 	} else if (Locate(wxT("konsole"), where)) {
 		terminal = where;
--- codelite.orig/LiteEditor/manager.cpp
+++ codelite/LiteEditor/manager.cpp
@@ -1900,8 +1900,8 @@ void Manager::DbgStart ( long pid )
 
 #if defined(__WXGTK__)
 	wxString where;
-	if ( !ExeLocator::Locate ( wxT ( "xterm" ), where ) ) {
-		wxMessageBox ( _ ( "Failed to locate 'xterm' application required by CodeLite, please install it and try again!" ), wxT ( "CodeLite" ), wxOK|wxCENTER|wxICON_WARNING, Frame::Get() );
+	if ( !ExeLocator::Locate ( wxT ( "x-terminal-emulator" ), where ) ) {
+		wxMessageBox ( _ ( "Failed to locate 'x-terminal-emulator' application required by CodeLite, please install it and try again!" ), wxT ( "CodeLite" ), wxOK|wxCENTER|wxICON_WARNING, Frame::Get() );
 		return;
 	}
 #endif
--- codelite.orig/Plugin/macros.h
+++ codelite/Plugin/macros.h
@@ -22,97 +22,97 @@
 //
 //////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////
- #ifndef MACROS_H
-#define MACROS_H
-
+ #ifndef MACROS_H
+#define MACROS_H
+
 #include <wx/stdpaths.h>
-//-------------------------------------------------------
-// wxWidgets Connect macros
-//-------------------------------------------------------
-
-#define ConnectChoice(ctrl, fn)\
-	ctrl->Connect(ctrl->GetId(), wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(fn), NULL, this);
-
-#define ConnectButton(ctrl, fn)\
-	ctrl->Connect(ctrl->GetId(), wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(fn), NULL, this);
-
-#define ConnectListBoxDClick(ctrl, fn)\
-	ctrl->Connect(ctrl->GetId(), wxEVT_COMMAND_LISTBOX_DOUBLECLICKED, wxCommandEventHandler(fn), NULL, this);
-
-#define ConnectCheckBox(ctrl, fn)\
-	ctrl->Connect(ctrl->GetId(), wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(fn), NULL, this);
-
-#define ConnectListCtrlItemSelected(ctrl, fn)\
-	ctrl->Connect(ctrl->GetId(), wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(fn), NULL, this);
-
-#define ConnectListCtrlItemActivated(ctrl, fn)\
-	ctrl->Connect(ctrl->GetId(), wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(fn), NULL, this);
-
-#define ConnectKeyDown(ctrl, fn)\
-	ctrl->Connect(ctrl->GetId(), wxEVT_KEY_DOWN, wxKeyEventHandler(fn), NULL, this);
-
-#define ConnectCharEvent(ctrl, fn)\
-	ctrl->Connect(ctrl->GetId(), wxEVT_CHAR, wxKeyEventHandler(fn), NULL, this);
-
-#define ConnectCmdTextEntered(ctrl, fn)\
-	ctrl->Connect(ctrl->GetId(), wxEVT_COMMAND_TEXT_ENTER, wxCommandEventHandler(fn), NULL, this);
-
-#define ConnectCmdTextUpdated(ctrl, fn)\
-	ctrl->Connect(ctrl->GetId(), wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(fn), NULL, this);
-
-#define ConnectCombo(ctrl, fn)\
-	ctrl->Connect(ctrl->GetId(), wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(fn), NULL, this);
-
-#define ConnectCheckList(ctrl, fn)\
-	ctrl->Connect(ctrl->GetId(), wxEVT_COMMAND_CHECKLISTBOX_TOGGLED, wxCommandEventHandler(fn), NULL, this);
-
-#define TrimString(str){\
-		str = str.Trim();\
-		str = str.Trim(false);\
-	}
-
-#define IsSourceFile(ext)\
-	(ext == wxT("cpp") || ext == wxT("cxx") || ext == wxT("c") || ext == wxT("c++") || ext == wxT("cc"))
-
-#define BoolToString(b) b ? wxT("yes") : wxT("no")
-
-//-----------------------------------------------------
-// Constants
-//-----------------------------------------------------
-
-const wxString clCMD_NEW = wxT("<New...>");
-const wxString clCMD_EDIT = wxT("<Edit...>");
-const wxString clCMD_DELETE = wxT("<Delete...>");
-
-// constant message
-const wxString BUILD_START_MSG      = wxT("----------Build Started--------\n");
-const wxString BUILD_END_MSG        = wxT("----------Build Ended----------\n");
+//-------------------------------------------------------
+// wxWidgets Connect macros
+//-------------------------------------------------------
+
+#define ConnectChoice(ctrl, fn)\
+	ctrl->Connect(ctrl->GetId(), wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(fn), NULL, this);
+
+#define ConnectButton(ctrl, fn)\
+	ctrl->Connect(ctrl->GetId(), wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(fn), NULL, this);
+
+#define ConnectListBoxDClick(ctrl, fn)\
+	ctrl->Connect(ctrl->GetId(), wxEVT_COMMAND_LISTBOX_DOUBLECLICKED, wxCommandEventHandler(fn), NULL, this);
+
+#define ConnectCheckBox(ctrl, fn)\
+	ctrl->Connect(ctrl->GetId(), wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(fn), NULL, this);
+
+#define ConnectListCtrlItemSelected(ctrl, fn)\
+	ctrl->Connect(ctrl->GetId(), wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(fn), NULL, this);
+
+#define ConnectListCtrlItemActivated(ctrl, fn)\
+	ctrl->Connect(ctrl->GetId(), wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(fn), NULL, this);
+
+#define ConnectKeyDown(ctrl, fn)\
+	ctrl->Connect(ctrl->GetId(), wxEVT_KEY_DOWN, wxKeyEventHandler(fn), NULL, this);
+
+#define ConnectCharEvent(ctrl, fn)\
+	ctrl->Connect(ctrl->GetId(), wxEVT_CHAR, wxKeyEventHandler(fn), NULL, this);
+
+#define ConnectCmdTextEntered(ctrl, fn)\
+	ctrl->Connect(ctrl->GetId(), wxEVT_COMMAND_TEXT_ENTER, wxCommandEventHandler(fn), NULL, this);
+
+#define ConnectCmdTextUpdated(ctrl, fn)\
+	ctrl->Connect(ctrl->GetId(), wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(fn), NULL, this);
+
+#define ConnectCombo(ctrl, fn)\
+	ctrl->Connect(ctrl->GetId(), wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(fn), NULL, this);
+
+#define ConnectCheckList(ctrl, fn)\
+	ctrl->Connect(ctrl->GetId(), wxEVT_COMMAND_CHECKLISTBOX_TOGGLED, wxCommandEventHandler(fn), NULL, this);
+
+#define TrimString(str){\
+		str = str.Trim();\
+		str = str.Trim(false);\
+	}
+
+#define IsSourceFile(ext)\
+	(ext == wxT("cpp") || ext == wxT("cxx") || ext == wxT("c") || ext == wxT("c++") || ext == wxT("cc"))
+
+#define BoolToString(b) b ? wxT("yes") : wxT("no")
+
+//-----------------------------------------------------
+// Constants
+//-----------------------------------------------------
+
+const wxString clCMD_NEW = wxT("<New...>");
+const wxString clCMD_EDIT = wxT("<Edit...>");
+const wxString clCMD_DELETE = wxT("<Delete...>");
+
+// constant message
+const wxString BUILD_START_MSG      = wxT("----------Build Started--------\n");
+const wxString BUILD_END_MSG        = wxT("----------Build Ended----------\n");
 const wxString BUILD_PROJECT_PREFIX = wxT("----------Building project:[ ");
 const wxString CLEAN_PROJECT_PREFIX = wxT("----------Cleaning project:[ ");
-const wxString SEARCH_IN_WORKSPACE  = wxT("Entire Workspace");
-const wxString SEARCH_IN_PROJECT    = wxT("Active Project");
+const wxString SEARCH_IN_WORKSPACE  = wxT("Entire Workspace");
+const wxString SEARCH_IN_PROJECT    = wxT("Active Project");
 const wxString SEARCH_IN_CURR_FILE_PROJECT = wxT("Current File's Project");
 
 // terminal macro
 #ifdef __WXGTK__
-#define TERMINAL_CMD  wxString::Format(wxT("%s/codelite_xterm '$(TITLE)' '$(CMD)'"), wxFileName(wxStandardPaths::Get().GetExecutablePath()).GetPath().c_str())
+#define TERMINAL_CMD  wxString::Format(wxT("%s/codelite_xterm '$(TITLE)' '$(CMD)'"), wxStandardPaths::Get().GetPluginsDir().c_str())
 #elif defined(__WXMAC__)
 #define TERMINAL_CMD  wxString::Format(wxT("%s/OpenTerm '$(CMD)'"), wxStandardPaths::Get().GetDataDir().c_str())
 #else
 const wxString TERMINAL_CMD         = wxT("");
 #endif
-
-#ifdef __WXMSW__
-#define PATH_SEP wxT("\\")
-#else
-#define PATH_SEP wxT("/")
-#endif
-
-#define viewAsMenuItemID         23500
-#define viewAsMenuItemMaxID      23500+100
-
-#define viewAsSubMenuID          23499
-#define RecentFilesSubMenuID     23600
-#define RecentWorkspaceSubMenuID 23650
 
-#endif // MACROS_H
+#ifdef __WXMSW__
+#define PATH_SEP wxT("\\")
+#else
+#define PATH_SEP wxT("/")
+#endif
+
+#define viewAsMenuItemID         23500
+#define viewAsMenuItemMaxID      23500+100
+
+#define viewAsSubMenuID          23499
+#define RecentFilesSubMenuID     23600
+#define RecentWorkspaceSubMenuID 23650
+
+#endif // MACROS_H
--- codelite.orig/Plugin/consolefinder.cpp
+++ codelite/Plugin/consolefinder.cpp
@@ -153,7 +153,9 @@ wxString ConsoleFinder::GetConsoleName()
 	//try to locate the default terminal
 	wxString terminal;
 	wxString where;
-	if (ExeLocator::Locate(wxT("gnome-terminal"), where)) {
+	if (ExeLocator::Locate(wxT("x-terminal-emulator"), where)) {
+		terminal = wxT("x-terminal-emulator -e ");
+	}else if (ExeLocator::Locate(wxT("gnome-terminal"), where)) {
 		terminal = wxT("gnome-terminal -e ");
 	} else if (ExeLocator::Locate(wxT("konsole"), where)) {
 		terminal = wxT("konsole");
@@ -162,7 +164,7 @@ wxString ConsoleFinder::GetConsoleName()
 	}
 
 	if (cmd.IsEmpty()) {
-		cmd = wxT("xterm -e ");
+		cmd = wxT("x-terminal-emulator -e ");
 	}
 
 	cmd = terminal;
