//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "codeformatterdlgbase.h"


// Declare the bitmap loading function
extern void wxCrafterGgLOZbInitBitmapResources();

static bool bBitmapLoaded = false;


CodeFormatterBaseDlg::CodeFormatterBaseDlg(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterGgLOZbInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizerMain = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizerMain);
    
    m_splitterSettingsPreview = new wxSplitterWindow(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxSP_LIVE_UPDATE|wxSP_NO_XP_THEME|wxSP_3DSASH);
    m_splitterSettingsPreview->SetSashGravity(0.5);
    m_splitterSettingsPreview->SetMinimumPaneSize(0);
    
    bSizerMain->Add(m_splitterSettingsPreview, 1, wxEXPAND, 5);
    
    m_panelSettings = new wxPanel(m_splitterSettingsPreview, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    
    wxBoxSizer* bSizerSettings = new wxBoxSizer(wxVERTICAL);
    m_panelSettings->SetSizer(bSizerSettings);
    
    m_notebookSettings = new wxNotebook(m_panelSettings, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizerSettings->Add(m_notebookSettings, 3, wxALL|wxEXPAND, 5);
    
    m_panelPredefinedStyles = new wxPanel(m_notebookSettings, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    m_notebookSettings->AddPage(m_panelPredefinedStyles, _("Predefined Styles"), false);
    
    wxBoxSizer* bSizerPredefinedStyles = new wxBoxSizer(wxVERTICAL);
    m_panelPredefinedStyles->SetSizer(bSizerPredefinedStyles);
    
    wxStaticBoxSizer* bSizerPredefinedStylesText = new wxStaticBoxSizer( new wxStaticBox(m_panelPredefinedStyles, wxID_ANY, wxT("")), wxVERTICAL);
    
    bSizerPredefinedStyles->Add(bSizerPredefinedStylesText, 0, wxALL|wxEXPAND, 5);
    
    m_staticText2 = new wxStaticText(m_panelPredefinedStyles, wxID_ANY, _("Choose one of the following predefined styles.\nYou may optionally override one or more of its settings from the next pages"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizerPredefinedStylesText->Add(m_staticText2, 0, wxALL|wxEXPAND, 5);
    
    wxArrayString m_radioBoxPredefinedStyleArr;
    m_radioBoxPredefinedStyleArr.Add(wxT("GNU"));
    m_radioBoxPredefinedStyleArr.Add(wxT("Java"));
    m_radioBoxPredefinedStyleArr.Add(wxT("K&&R"));
    m_radioBoxPredefinedStyleArr.Add(wxT("Linux"));
    m_radioBoxPredefinedStyleArr.Add(wxT("ANSI"));
    m_radioBoxPredefinedStyle = new wxRadioBox(m_panelPredefinedStyles, wxID_ANY, _("Predefined Style:"), wxDefaultPosition, wxSize(-1, -1), m_radioBoxPredefinedStyleArr, 1, wxRA_SPECIFY_COLS);
    m_radioBoxPredefinedStyle->SetSelection(0);
    
    bSizerPredefinedStyles->Add(m_radioBoxPredefinedStyle, 0, wxALL|wxEXPAND, 5);
    
    wxStaticBoxSizer* sbPredefineHelpSizer = new wxStaticBoxSizer( new wxStaticBox(m_panelPredefinedStyles, wxID_ANY, wxT("")), wxVERTICAL);
    
    bSizerPredefinedStyles->Add(sbPredefineHelpSizer, 1, wxALL|wxEXPAND, 5);
    
    m_staticTextPredefineHelp = new wxStaticText(m_panelPredefinedStyles, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    
    sbPredefineHelpSizer->Add(m_staticTextPredefineHelp, 1, wxALL|wxEXPAND, 5);
    
    m_panelBrackets = new wxPanel(m_notebookSettings, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    m_notebookSettings->AddPage(m_panelBrackets, _("Brackets"), false);
    
    wxBoxSizer* bBracketsSizer = new wxBoxSizer(wxVERTICAL);
    m_panelBrackets->SetSizer(bBracketsSizer);
    
    wxArrayString m_radioBoxBracketsArr;
    m_radioBoxBracketsArr.Add(wxT("Break Closing"));
    m_radioBoxBracketsArr.Add(wxT("Attach"));
    m_radioBoxBracketsArr.Add(wxT("Linux"));
    m_radioBoxBracketsArr.Add(wxT("Break"));
    m_radioBoxBracketsArr.Add(wxT("None"));
    m_radioBoxBrackets = new wxRadioBox(m_panelBrackets, wxID_ANY, _("Brackets:"), wxDefaultPosition, wxSize(-1, -1), m_radioBoxBracketsArr, 1, wxRA_SPECIFY_COLS);
    m_radioBoxBrackets->SetSelection(3);
    
    bBracketsSizer->Add(m_radioBoxBrackets, 0, wxALL|wxEXPAND, 5);
    
    m_panelIndentation = new wxPanel(m_notebookSettings, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    m_notebookSettings->AddPage(m_panelIndentation, _("Indentation"), false);
    
    wxStaticBoxSizer* sbIndentationSizer = new wxStaticBoxSizer( new wxStaticBox(m_panelIndentation, wxID_ANY, _("Indentation:")), wxVERTICAL);
    m_panelIndentation->SetSizer(sbIndentationSizer);
    
    wxFlexGridSizer* fgIdentationSizer = new wxFlexGridSizer(  0, 1, 0, 0);
    fgIdentationSizer->SetFlexibleDirection( wxBOTH );
    fgIdentationSizer->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    fgIdentationSizer->AddGrowableCol(0);
    
    sbIndentationSizer->Add(fgIdentationSizer, 1, wxEXPAND, 5);
    
    m_checkBoxIndetClass = new wxCheckBox(m_panelIndentation, wxID_ANY, _("Class"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxIndetClass->SetValue(false);
    
    fgIdentationSizer->Add(m_checkBoxIndetClass, 0, wxALL|wxEXPAND, 5);
    
    m_checkBoxIndentBrackets = new wxCheckBox(m_panelIndentation, wxID_ANY, _("Brackets"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxIndentBrackets->SetValue(false);
    
    fgIdentationSizer->Add(m_checkBoxIndentBrackets, 0, wxALL|wxEXPAND, 5);
    
    m_checkBoxIndetSwitch = new wxCheckBox(m_panelIndentation, wxID_ANY, _("Switches"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxIndetSwitch->SetValue(false);
    
    fgIdentationSizer->Add(m_checkBoxIndetSwitch, 0, wxALL|wxEXPAND, 5);
    
    m_checkBoxIndentNamespaces = new wxCheckBox(m_panelIndentation, wxID_ANY, _("Namespaces"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxIndentNamespaces->SetValue(false);
    
    fgIdentationSizer->Add(m_checkBoxIndentNamespaces, 0, wxALL|wxEXPAND, 5);
    
    m_checkBoxIndetCase = new wxCheckBox(m_panelIndentation, wxID_ANY, _("Case"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxIndetCase->SetValue(false);
    
    fgIdentationSizer->Add(m_checkBoxIndetCase, 0, wxALL|wxEXPAND, 5);
    
    m_checkBoxIndentLabels = new wxCheckBox(m_panelIndentation, wxID_ANY, _("Labels"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxIndentLabels->SetValue(false);
    
    fgIdentationSizer->Add(m_checkBoxIndentLabels, 0, wxALL|wxEXPAND, 5);
    
    m_checkBoxIndetBlocks = new wxCheckBox(m_panelIndentation, wxID_ANY, _("Blocks"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxIndetBlocks->SetValue(false);
    
    fgIdentationSizer->Add(m_checkBoxIndetBlocks, 0, wxALL|wxEXPAND, 5);
    
    m_checkBoxIndentPreprocessors = new wxCheckBox(m_panelIndentation, wxID_ANY, _("Preprocessors"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxIndentPreprocessors->SetValue(true);
    
    fgIdentationSizer->Add(m_checkBoxIndentPreprocessors, 0, wxALL|wxEXPAND, 5);
    
    m_checkBoxIndentMaxInst = new wxCheckBox(m_panelIndentation, wxID_ANY, _("Max Instatement Indent"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxIndentMaxInst->SetValue(false);
    
    fgIdentationSizer->Add(m_checkBoxIndentMaxInst, 0, wxALL|wxEXPAND, 5);
    
    m_checkBoxIndentMinCond = new wxCheckBox(m_panelIndentation, wxID_ANY, _("Min Conditional Indent"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxIndentMinCond->SetValue(false);
    
    fgIdentationSizer->Add(m_checkBoxIndentMinCond, 0, wxALL|wxEXPAND, 5);
    
    m_panelFormatting = new wxPanel(m_notebookSettings, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    m_notebookSettings->AddPage(m_panelFormatting, _("Formatting"), false);
    
    wxStaticBoxSizer* sbFormattingSizer = new wxStaticBoxSizer( new wxStaticBox(m_panelFormatting, wxID_ANY, _("Formatting Options:")), wxVERTICAL);
    m_panelFormatting->SetSizer(sbFormattingSizer);
    
    wxFlexGridSizer* fgFormattingSizer = new wxFlexGridSizer(  0, 1, 0, 0);
    fgFormattingSizer->SetFlexibleDirection( wxBOTH );
    fgFormattingSizer->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    fgFormattingSizer->AddGrowableCol(0);
    
    sbFormattingSizer->Add(fgFormattingSizer, 1, wxEXPAND, 5);
    
    m_checkBoxFormatBreakBlocks = new wxCheckBox(m_panelFormatting, wxID_ANY, _("Break Blocks"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxFormatBreakBlocks->SetValue(false);
    
    fgFormattingSizer->Add(m_checkBoxFormatBreakBlocks, 0, wxALL, 5);
    
    m_checkBoxFormatPadParenth = new wxCheckBox(m_panelFormatting, wxID_ANY, _("Pad Parenthesis"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxFormatPadParenth->SetValue(false);
    
    fgFormattingSizer->Add(m_checkBoxFormatPadParenth, 0, wxALL, 5);
    
    m_checkBoxFormatBreakBlocksAll = new wxCheckBox(m_panelFormatting, wxID_ANY, _("Break Blocks All"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxFormatBreakBlocksAll->SetValue(false);
    
    fgFormattingSizer->Add(m_checkBoxFormatBreakBlocksAll, 0, wxALL, 5);
    
    m_checkBoxFormatPadParentOut = new wxCheckBox(m_panelFormatting, wxID_ANY, _("Pad Parenthesis Outside"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxFormatPadParentOut->SetValue(false);
    
    fgFormattingSizer->Add(m_checkBoxFormatPadParentOut, 0, wxALL, 5);
    
    m_checkBoxFormatBreakElseif = new wxCheckBox(m_panelFormatting, wxID_ANY, _("Break else-if"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxFormatBreakElseif->SetValue(false);
    
    fgFormattingSizer->Add(m_checkBoxFormatBreakElseif, 0, wxALL, 5);
    
    m_checkBoxFormatPadParentIn = new wxCheckBox(m_panelFormatting, wxID_ANY, _("Pad Parenthesis  Inside"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxFormatPadParentIn->SetValue(false);
    
    fgFormattingSizer->Add(m_checkBoxFormatPadParentIn, 0, wxALL, 5);
    
    m_checkBoxFormatPadOperators = new wxCheckBox(m_panelFormatting, wxID_ANY, _("Pad Operators"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxFormatPadOperators->SetValue(false);
    
    fgFormattingSizer->Add(m_checkBoxFormatPadOperators, 0, wxALL, 5);
    
    m_checkBoxFormatUnPadParent = new wxCheckBox(m_panelFormatting, wxID_ANY, _("UnPad Parenthesis"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxFormatUnPadParent->SetValue(false);
    
    fgFormattingSizer->Add(m_checkBoxFormatUnPadParent, 0, wxALL, 5);
    
    m_checkBoxFormatOneLineKeepStmnt = new wxCheckBox(m_panelFormatting, wxID_ANY, _("One Line Keep Statement"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxFormatOneLineKeepStmnt->SetValue(false);
    
    fgFormattingSizer->Add(m_checkBoxFormatOneLineKeepStmnt, 0, wxALL, 5);
    
    m_checkBoxFormatFillEmptyLines = new wxCheckBox(m_panelFormatting, wxID_ANY, _("Fill Empty Lines"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxFormatFillEmptyLines->SetValue(false);
    
    fgFormattingSizer->Add(m_checkBoxFormatFillEmptyLines, 0, wxALL, 5);
    
    m_checkBoxFormatOneLineKeepBlocks = new wxCheckBox(m_panelFormatting, wxID_ANY, _("One Line Keep Blocks"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxFormatOneLineKeepBlocks->SetValue(false);
    
    fgFormattingSizer->Add(m_checkBoxFormatOneLineKeepBlocks, 0, wxALL, 5);
    
    m_panelCustomSettings = new wxPanel(m_notebookSettings, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    m_notebookSettings->AddPage(m_panelCustomSettings, _("Custom Settings"), false);
    
    wxBoxSizer* bCustomSettingsSizer = new wxBoxSizer(wxVERTICAL);
    m_panelCustomSettings->SetSizer(bCustomSettingsSizer);
    
    m_staticText3 = new wxStaticText(m_panelCustomSettings, wxID_ANY, _("Custom user settings:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bCustomSettingsSizer->Add(m_staticText3, 0, wxALL|wxEXPAND, 5);
    
    m_textCtrlUserFlags = new wxTextCtrl(m_panelCustomSettings, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_RICH2|wxTE_PROCESS_TAB|wxTE_PROCESS_ENTER|wxTE_MULTILINE);
    wxFont m_textCtrlUserFlagsFont(10, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Sans"));
    m_textCtrlUserFlags->SetFont(m_textCtrlUserFlagsFont);
    
    bCustomSettingsSizer->Add(m_textCtrlUserFlags, 1, wxALL|wxEXPAND, 5);
    
    m_panelPreview = new wxPanel(m_splitterSettingsPreview, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTAB_TRAVERSAL);
    m_splitterSettingsPreview->SplitVertically(m_panelSettings, m_panelPreview, 450);
    
    wxBoxSizer* bPreviewSizer = new wxBoxSizer(wxHORIZONTAL);
    m_panelPreview->SetSizer(bPreviewSizer);
    
    m_textCtrlPreview = new wxStyledTextCtrl(m_panelPreview, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxBORDER_NONE);
    // Configure the fold margin
    m_textCtrlPreview->SetMarginType     (4, wxSTC_MARGIN_SYMBOL);
    m_textCtrlPreview->SetMarginMask     (4, wxSTC_MASK_FOLDERS);
    m_textCtrlPreview->SetMarginSensitive(4, true);
    m_textCtrlPreview->SetMarginWidth    (4, 16);
    
    m_textCtrlPreview->SetProperty(wxT("fold"),wxT("1"));
    m_textCtrlPreview->MarkerDefine(wxSTC_MARKNUM_FOLDEROPEN,    wxSTC_MARK_ARROWDOWN);
    m_textCtrlPreview->MarkerDefine(wxSTC_MARKNUM_FOLDER,        wxSTC_MARK_ARROW);
    m_textCtrlPreview->MarkerDefine(wxSTC_MARKNUM_FOLDERSUB,     wxSTC_MARK_BACKGROUND);
    m_textCtrlPreview->MarkerDefine(wxSTC_MARKNUM_FOLDERTAIL,    wxSTC_MARK_BACKGROUND);
    m_textCtrlPreview->MarkerDefine(wxSTC_MARKNUM_FOLDEREND,     wxSTC_MARK_ARROW);
    m_textCtrlPreview->MarkerDefine(wxSTC_MARKNUM_FOLDEROPENMID, wxSTC_MARK_ARROWDOWN);
    m_textCtrlPreview->MarkerDefine(wxSTC_MARKNUM_FOLDERMIDTAIL, wxSTC_MARK_BACKGROUND);
    // Configure the tracker margin
    m_textCtrlPreview->SetMarginWidth(1, 0);
    
    // Configure the symbol margin
    m_textCtrlPreview->SetMarginType (2, wxSTC_MARGIN_SYMBOL);
    m_textCtrlPreview->SetMarginMask (2, ~(wxSTC_MASK_FOLDERS));
    m_textCtrlPreview->SetMarginWidth(2, 0);
    m_textCtrlPreview->SetMarginSensitive(2, true);
    
    // Configure the line numbers margin
    int m_textCtrlPreview_PixelWidth = 4 + 5 *m_textCtrlPreview->TextWidth(wxSTC_STYLE_LINENUMBER, wxT("9"));
    m_textCtrlPreview->SetMarginType(0, wxSTC_MARGIN_NUMBER);
    m_textCtrlPreview->SetMarginWidth(0,m_textCtrlPreview_PixelWidth);
    
    // Configure the line symbol margin
    m_textCtrlPreview->SetMarginType(3, wxSTC_MARGIN_FORE);
    m_textCtrlPreview->SetMarginMask(3, 0);
    m_textCtrlPreview->SetMarginWidth(3,0);
    // Select the lexer
    m_textCtrlPreview->SetLexer(wxSTC_LEX_NULL);
    // Set default font / styles
    m_textCtrlPreview->StyleClearAll();
    m_textCtrlPreview->SetWrapMode(0);
    m_textCtrlPreview->SetIndentationGuides(0);
    m_textCtrlPreview->SetKeyWords(0, wxT(""));
    m_textCtrlPreview->SetKeyWords(1, wxT(""));
    m_textCtrlPreview->SetKeyWords(2, wxT(""));
    m_textCtrlPreview->SetKeyWords(3, wxT(""));
    m_textCtrlPreview->SetKeyWords(4, wxT(""));
    
    bPreviewSizer->Add(m_textCtrlPreview, 1, wxALL|wxEXPAND, 5);
    m_textCtrlPreview->SetMinSize(wxSize(300,-1));
    
    wxBoxSizer* bSizerButtons = new wxBoxSizer(wxHORIZONTAL);
    
    bSizerMain->Add(bSizerButtons, 0, wxALIGN_CENTER_HORIZONTAL, 5);
    
    m_buttonOK = new wxButton(this, wxID_OK, _("&OK"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_buttonOK->SetDefault();
    
    bSizerButtons->Add(m_buttonOK, 0, wxALL, 5);
    
    m_buttonClose = new wxButton(this, wxID_CANCEL, _("&Cancel"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizerButtons->Add(m_buttonClose, 0, wxALL, 5);
    
    m_buttonHelp = new wxButton(this, wxID_ANY, _("&Help"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizerButtons->Add(m_buttonHelp, 0, wxALL, 5);
    
    SetSizeHints(800,600);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    m_radioBoxPredefinedStyle->Connect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(CodeFormatterBaseDlg::OnRadioBoxPredefinedStyle), NULL, this);
    m_radioBoxBrackets->Connect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(CodeFormatterBaseDlg::OnRadioBoxBrackets), NULL, this);
    m_checkBoxIndetClass->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxIndentBrackets->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxIndetSwitch->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxIndentNamespaces->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxIndetCase->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxIndentLabels->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxIndetBlocks->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxIndentPreprocessors->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxIndentMaxInst->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxIndentMinCond->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatBreakBlocks->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatPadParenth->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatBreakBlocksAll->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatPadParentOut->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatBreakElseif->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatPadParentIn->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatPadOperators->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatUnPadParent->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatOneLineKeepStmnt->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatFillEmptyLines->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatOneLineKeepBlocks->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    
}

CodeFormatterBaseDlg::~CodeFormatterBaseDlg()
{
    m_radioBoxPredefinedStyle->Disconnect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(CodeFormatterBaseDlg::OnRadioBoxPredefinedStyle), NULL, this);
    m_radioBoxBrackets->Disconnect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(CodeFormatterBaseDlg::OnRadioBoxBrackets), NULL, this);
    m_checkBoxIndetClass->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxIndentBrackets->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxIndetSwitch->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxIndentNamespaces->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxIndetCase->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxIndentLabels->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxIndetBlocks->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxIndentPreprocessors->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxIndentMaxInst->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxIndentMinCond->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatBreakBlocks->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatPadParenth->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatBreakBlocksAll->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatPadParentOut->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatBreakElseif->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatPadParentIn->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatPadOperators->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatUnPadParent->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatOneLineKeepStmnt->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatFillEmptyLines->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    m_checkBoxFormatOneLineKeepBlocks->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CodeFormatterBaseDlg::OnCheckBox), NULL, this);
    
}
